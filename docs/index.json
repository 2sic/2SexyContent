{
  "api/ToSic.Eav.DataSources.BaseDataSource.html": {
    "href": "api/ToSic.Eav.DataSources.BaseDataSource.html",
    "title": "Class BaseDataSource | 2sxc and EAV 10",
    "keywords": "Class BaseDataSource The base class, which should always be inherited. Already implements things like Get One / Get many, Caching and a lot more. Inheritance System.Object HasLog BaseDataSource App AttributeFilter EntityIdFilter EntityTypeFilter ExternalDataDataSource ItemFilterDuplicates OwnerFilter Paging PassThrough PublishingFilter RelationshipFilter Shuffle StreamFallback StreamMerge ValueFilter ValueSort Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax public abstract class BaseDataSource : HasLog, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Properties | Improve this Doc View Source AppId The app id as used internally Declaration public virtual int AppId { get; set; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source Cache Direct access to the root cache underlying all data provided by this data source. Declaration public ICache Cache { get; } Property Value Type Description ToSic.Eav.DataSources.Caches.ICache An ToSic.Eav.DataSources.Caches.ICache data source to the root cache. | Improve this Doc View Source CacheFullKey Combination of the current key and all keys of upstream cached items, to create a long unique key for this context. Declaration public virtual string CacheFullKey { get; } Property Value Type Description System.String Full key containing own partial key and upstream keys. | Improve this Doc View Source CachePartialKey Unique key-id for this specific situation - could be the same for all instances, or could vary by some parameter. Declaration public virtual string CachePartialKey { get; } Property Value Type Description System.String A string which is specific to this cache-item. | Improve this Doc View Source CacheRelevantConfigurations Some configuration of the data source is cache-relevant, others are not. This list contains the names of all configuration items which are cache relevant. It will be used when generating a unique ID for caching the data. Declaration public List<string> CacheRelevantConfigurations { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public virtual long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source Configuration Gets a Dictionary of Configurations for this DataSource, e.g. Key: EntityId, Value: [QueryString:EntityId] Declaration public IDictionary<string, string> Configuration { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source ConfigurationProvider Gets the ConfigurationProvider for this DataSource Declaration public ITokenListFiller ConfigurationProvider { get; protected set; } Property Value Type Description ToSic.Eav.LookUp.ITokenListFiller | Improve this Doc View Source DataSourceGuid Internal ID usually from persisted configurations IF the configuration was build from an pre-stored query. Declaration public Guid DataSourceGuid { get; set; } Property Value Type Description System.Guid The guid of this data source which identifies the configuration IEntity of the data source. | Improve this Doc View Source In List of all In connections Declaration public IDictionary<string, IDataStream> In { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > | Improve this Doc View Source Item[String] Gets the Out-Stream with specified Name. Declaration public IDataStream this[string outName] { get; } Parameters Type Name Description System.String outName Property Value Type Description IDataStream an IDataStream of the desired name Exceptions Type Condition System.NullReferenceException if the stream does not exist | Improve this Doc View Source List The items in the data-source - to be exact, the ones in the Default stream. Declaration public IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > A list of IEntity items in the Default stream. | Improve this Doc View Source Name Name of this data source - mainly to aid debugging Declaration public string Name { get; } Property Value Type Description System.String Name of this source. | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public virtual IDictionary<string, IDataStream> Out { get; protected set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects | Improve this Doc View Source Ready Indicates whether the DataSource is ready for use (initialized/configured) Declaration public virtual bool Ready { get; } Property Value Type Description System.Boolean True if ready, false if not. Rarely used. | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public virtual int ZoneId { get; set; } Property Value Type Description System.Int32 The zone ID this thing belongs to Methods | Improve this Doc View Source Attach(String, IDataSource) Add a single named stream to the In Declaration public void Attach(string streamName, IDataSource dataSource) Parameters Type Name Description System.String streamName In-name of the stream IDataSource dataSource The data source - will use it's default out | Improve this Doc View Source Attach(String, IDataStream) Add a single named stream to the In Declaration public void Attach(string streamName, IDataStream dataStream) Parameters Type Name Description System.String streamName In-name of the stream IDataStream dataStream The data stream to attach | Improve this Doc View Source Attach(IDataSource) Attach a DataSource to In - replaces all existing in-streams. Declaration public void Attach(IDataSource dataSource) Parameters Type Name Description IDataSource dataSource DataSource to attach | Improve this Doc View Source CacheChanged(Int64) Declaration public virtual bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp Returns Type Description System.Boolean | Improve this Doc View Source PurgeList(Boolean) Declaration public void PurgeList(bool cascade = false) Parameters Type Name Description System.Boolean cascade Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Sxc.LookUp.html": {
    "href": "api/ToSic.Sxc.LookUp.html",
    "title": "Namespace ToSic.Sxc.LookUp | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either web-specific (like request objects) or DynamicData specific. Classes LookUpInDynamicEntity LookUp for creating token based templates. In addition to retrieving values, it also resolves special tokens like repeater:index repeater:isfirst etc."
  },
  "api/ToSic.Sxc.Apps.AppConfiguration.html": {
    "href": "api/ToSic.Sxc.Apps.AppConfiguration.html",
    "title": "Class AppConfiguration | 2sxc and EAV 10",
    "keywords": "Class AppConfiguration The configuration of the app, as you can set it in the app-package definition. Inheritance System.Object EntityBasedType EntityBasedWithLog AppConfiguration Implements IEntityBasedType IHasLog Inherited Members EntityBasedWithLog.Log EntityBasedType.Entity EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Get<T>(String, T) Namespace : ToSic.Sxc.Apps Assembly : ToSic.Sxc.dll Syntax public class AppConfiguration : EntityBasedWithLog, IEntityBasedType, IHasLog Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description System.String | Improve this Doc View Source EnableAjax Declaration public bool EnableAjax { get; } Property Value Type Description System.Boolean | Improve this Doc View Source EnableRazor Declaration public bool EnableRazor { get; } Property Value Type Description System.Boolean | Improve this Doc View Source EnableToken Declaration public bool EnableToken { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Folder Declaration public string Folder { get; } Property Value Type Description System.String | Improve this Doc View Source IsHidden Declaration public bool IsHidden { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source OriginalId Declaration public Guid OriginalId { get; } Property Value Type Description System.Guid | Improve this Doc View Source RequiredDnn Declaration public Version RequiredDnn { get; } Property Value Type Description System.Version | Improve this Doc View Source RequiredSxc Declaration public Version RequiredSxc { get; } Property Value Type Description System.Version | Improve this Doc View Source Version Declaration public Version Version { get; } Property Value Type Description System.Version Implements IEntityBasedType IHasLog"
  },
  "api/ToSic.Eav.Apps.IApp.html": {
    "href": "api/ToSic.Eav.Apps.IApp.html",
    "title": "Interface IApp | 2sxc and EAV 10",
    "keywords": "Interface IApp An App in memory - for quickly getting things done with the app data, queries etc. Inherited Members IInZone.ZoneId IInApp.AppId Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax public interface IApp : IAppIdentityWithPublishingState, IInAppAndZone, IInZone, IInApp Properties | Improve this Doc View Source AppGuid GUID of the App as string. Declaration string AppGuid { get; } Property Value Type Description System.String The internal GUID of the app. | Improve this Doc View Source Data Data of the app Declaration IAppData Data { get; } Property Value Type Description IAppData | Improve this Doc View Source Folder App Folder Declaration string Folder { get; } Property Value Type Description System.String The folder as configured in the app configuration. | Improve this Doc View Source Hidden If the app should be hidden from the normal app-picker. Important to configure apps once and then hide from normal users. Declaration bool Hidden { get; } Property Value Type Description System.Boolean The hidden-state as configured in the app configuration. | Improve this Doc View Source Metadata The app metadata - like settings, resources etc. Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A metadata provider for the app | Improve this Doc View Source Name App Name Declaration string Name { get; } Property Value Type Description System.String The name as configured in the app configuration. | Improve this Doc View Source Query All queries of the app, to access like App.Query[\"name\"] Declaration IDictionary<string, IDataSource> Query { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataSource > A dictionary with all queries. Internally the dictionary will not be built unless accessed."
  },
  "api/ToSic.Sxc.Web.IDynamicCode.html": {
    "href": "api/ToSic.Sxc.Web.IDynamicCode.html",
    "title": "Interface IDynamicCode | 2sxc and EAV 10",
    "keywords": "Interface IDynamicCode Dynamic code files like Razor or WebApis. Supports many properties like App, etc. to ensure that the dynamic code has everything you need. Also provides many Conversions between IEntity and IDynamicEntity . Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity \"just work\" even if you give them the original data. Namespace : ToSic.Sxc.Web Assembly : ToSic.Sxc.dll Syntax public interface IDynamicCode : IAppAndDataHelpers, ISharedCodeBuilder Properties | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration IInPageEditingSystem Edit { get; } Property Value Type Description IInPageEditingSystem An IInPageEditingSystem object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration ILinkHelper Link { get; } Property Value Type Description ILinkHelper A ILinkHelper object. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(IEnumerable<IEntity>) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration IEnumerable<dynamic> AsDynamic(IEnumerable<IEntity> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEntity > entities Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects | Improve this Doc View Source AsDynamic(KeyValuePair<Int32, IEntity>) Converts a dictionary-style list of many IEntity objects into a key-value pair of IDynamicEntity objects. Declaration dynamic AsDynamic(KeyValuePair<int, IEntity> entityKeyValuePair) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.Int32 , IEntity > entityKeyValuePair Returns Type Description System.Object | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration dynamic AsDynamic(dynamic dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(IDataStream) Converts a list of entities from a IDataSource into a list of IDynamicEntity objects. Declaration IEnumerable<dynamic> AsDynamic(IDataStream stream) Parameters Type Name Description IDataStream stream the stream containing IEntity items Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration IEntity AsEntity(dynamic dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source CreateSource<T>(IDataSource, ITokenListFiller) Create a IDataSource which will process data from the given stream. Declaration T CreateSource<T>(IDataSource inSource = null, ITokenListFiller configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ToSic.Eav.LookUp.ITokenListFiller configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource"
  },
  "api/ToSic.Sxc.Blocks.Purpose.html": {
    "href": "api/ToSic.Sxc.Blocks.Purpose.html",
    "title": "Enum Purpose | 2sxc and EAV 10",
    "keywords": "Enum Purpose These are the purposes of a block as it's being built. It can be built to generate a web-view, juts for indexing or possibly also for json publishing. Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax public enum Purpose Fields Name Description IndexingForSearch The purpose is for the search-indexer to build the index. PublishData The purpose is to publish data as a JSON stream. This is a special use case and not documented well ATM. WebView This is a normal use case, web-view."
  },
  "api/ToSic.Eav.DataSources.html": {
    "href": "api/ToSic.Eav.DataSources.html",
    "title": "Namespace ToSic.Eav.DataSources | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.DataSources This is all about DataSources which are chained together to prepare/process data for views, WebApi or anything else. In most cases there will be a VisualQuery which connects all the parts automatically, but when you want to work with them programatically, here you'll find the API. Note that we've hidden the constructors for all DataSource objects in these docs, because you should usually use the CreateSource<T>(...) command on the Razor template or WebApi, which will auto-configure things behind the scenes. Classes App Represents an App with all the data inside it. For example, it has a variable amount of Out-streams, one for each content-type in the app. AttributeFilter DataSource to only pass through configured AttributeNames - other attributes/properties are removed from the entities. BaseDataSource The base class, which should always be inherited. Already implements things like Get One / Get many, Caching and a lot more. CsvDataSource DataSource for importing/reading CSV files. DataTableDataSource Provide Entities from a System.Data.DataTable. This is not meant for VisualQuery, but for code which pre-processes data in a DataTable and then wants to provide it as entities. EntityIdFilter A DataSource that filters Entities by Ids EntityTypeFilter Return only entities of a specific content-type ExternalDataDataSource Base DataSource class for providing data from external systems ItemFilterDuplicates A DataSource that merges two streams OwnerFilter Filter entities to show Drafts or only Published Entities Paging A DataSource that filters Entities by Ids PassThrough A DataSource that passes through all In Connections. Can be used con consolidate/merge multiple Sources into one. PublishingFilter Filter entities to show Drafts or only Published Entities RelationshipFilter Filter Entities by Value in a Related Entity. For example: Find all Books (desired Entity), whose Authors (related Entity) have a Country (Attribute) with 'Switzerland' (Value). Shuffle A DataSource that filters Entities by Ids SqlDataSource Provide Entities from a SQL Server StreamFallback A DataSource that returns the first stream which has content StreamMerge A DataSource that merges two streams ValueFilter Return only Entities having a specific value in an Attribute ValueSort Sort Entity by values in specified Attributes Interfaces IDataSource Public interface for an Eav DataSource. All DataSource objects are based on this. IDataStream Represents a DataStream object. This is a stream of IEntity objects, which has a source and a name. A stream can be read from, and it can be attached to upstream data-sources for further processing. IDataTarget Represents a data source that can be the recipient of Data. This basically means it has an In IDataStream"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the EAV & 2sxc API Documentation | 2sxc and EAV 10",
    "keywords": "This is the EAV & 2sxc API Documentation This is the documentation for EAV and 2sxc APIs. It's fairly advanced, so if you're new to 2sxc, best start with 2sxc.org . Where to Start 2sxc is an easy to use dynamic content system for .net Platforms like DNN. If you are just getting started, then this is probably not where you should be looking. Focus first on: Content on 2sxc.org like the learn section Apps on 2sxc Catalog which contains many ready-to-use apps like blogs and news, as well as tutorials The DNN Tutorials on 2sxc.org With that knowledge, you can already create amazing stuff. Everything you find here is very advanced and you won't need it for normal everyday work."
  },
  "articles/architecture.html": {
    "href": "articles/architecture.html",
    "title": "EAV / 2sxc / DNN Architecture | 2sxc and EAV 10",
    "keywords": "EAV / 2sxc / DNN Architecture 2sxc is simple to use, but to enable that, it's pretty sophisticated on the inside. We'll give you an overview here, so you can better understand what you are using. Overall Architecture The Storage Systems This is fairly straight forward - data can be stored in SQL (spread across tables or using JSON) and the File System (stored as JSON). Note that assets like images are not handled here, but in the EAV-Apps layer (see below). The EAV Layer The data management system underneath everything is called the EAV - which stands for Entity , Attribute , Value . Anything in that namespace is about internal data models, reading/saving data etc. So anything inside the ToSic.Eav.Data is all about the internals, which you only need in special scenarios. The same applies to @ToSic.Eav.Apps.Interfaces which is the sub-system responsible for combining data into virtual bundles called Apps . You can usually ignore this. The SXC Layer On top of the EAV layer we have the Sxc layer. It's responsible for Content Management on top of the App model provided by the EAV . The Sxc layer provides things like @ToSic.Sxc.Interfaces.IDynamicEntity to let you code like @Content.Title . This is usually more interesting for you, but still fairly generic, because 2sxc is also meant to work with other platforms like NopCommerce, Orchard or Oqtane, but it hasn't been implemented yet. The DNN Layer On top of the Sxc layer we have the Dnn layer. It connects 2sxc with Dnn. Usually when you're writing code and want to know about the API, you'll typically start here, and drill down to the other APIs as needed. Architecture of the EAV Layer Inside the EAV you'll find a whole ecosystem of parts which make the magic happen. Infrastructure This is very internal stuff, to make sure everything happens. You will usually not go here. Most if it is also not public API. Areas of interest may be the ToSic.Eav.Logging or @ToSic.Eav.ValueProviders. Core Data Models This is more interesting and relevant to you, when you want to dive deep into the data model. Again you should note that this is advanced stuff. You'll find it in ToSic.Eav.Data - the most common bit you may care about is IEntity and IContentType . Data Processing This is where things get relevant for you. Check out the ToSic.Eav.DataSources to find all the bits and pieces used to process, filter and cache data. Storage This is still more an internal bit, and as of now you shouldn't use it. App System and Assets Another part that you may want to know more about. Here is where data is clustered together into virtual containers called Apps . These contain all the content-types and items of an App. It also has view-definitions, Content-Blocks (the logical unit usually called a Module in DNN) and way more. You'll find it in @ToSic.Eav.Apps.Interfaces. The assets - usually using ADAM - are found in ToSic.Eav.Apps.Assets . Web API This is ATM an internal section, mainly for connecting DNN WebAPIs to the EAV. Not documented as of now. The Fine Line Between Eav.Apps and Sxc.* To keep the architecture clean, it's important to draw a clear line between Apps and what Sxc does. Basically it's this: Eav.Apps are virtual containers bundling things together. This means content-types, data, queries, settings, etc. Sxc is all about (Web) Content Management. So anything related to views, templates, assets, content-blocks is in Sxc. Specifically, these things may not be in Apps, and must be in Sxc Templates Rendering Engines like Token/Razor Content-Blocks Custom WebApi (which is also kind of a dynamic rendering engine)"
  },
  "api/ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute.html": {
    "href": "api/ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute.html",
    "title": "Class VisualQueryAttribute | 2sxc and EAV 10",
    "keywords": "Class VisualQueryAttribute Custom Attribute for DataSources and usage in Pipeline Designer. Will add information about help, configuration-content-types etc. Only DataSources which have this attribute will be listed in the designer-tool Inheritance System.Object System.Attribute VisualQueryAttribute Implements System.Runtime.InteropServices._Attribute Namespace : ToSic.Eav.DataSources.VisualQuery Assembly : ToSic.Eav.DataSources.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface)] public class VisualQueryAttribute : Attribute, _Attribute Properties | Improve this Doc View Source DynamicOut Determine if this data sources can have many out-streams with custom names Declaration public bool DynamicOut { get; set; } Property Value Type Description System.Boolean True if this data source can also provide other named out-streams, false if it only has the defined list of out-streams. | Improve this Doc View Source EnableConfig Should configuration be enabled in the VisualQuery designer? Declaration public bool EnableConfig { get; } Property Value Type Description System.Boolean True if we have a known configuration content-type | Improve this Doc View Source ExpectsDataOfType Name of the content-type used to configure this data-source in the visual-query designer. Note that older data sources have a name like \"|Config ToSic.Eav.DataSources.App\", whereas newer sources have a GUID. Declaration public string ExpectsDataOfType { get; set; } Property Value Type Description System.String | Improve this Doc View Source GlobalName The name needed to instantiate this class from a DLL. Declaration public string GlobalName { get; set; } Property Value Type Description System.String | Improve this Doc View Source HelpLink The help-link to get help for this data source Declaration public string HelpLink { get; set; } Property Value Type Description System.String | Improve this Doc View Source Icon Optional custom icon, based on the icon-names from the FontAwesome 4 library. Declaration public string Icon { get; set; } Property Value Type Description System.String | Improve this Doc View Source In List of in-streams expected by this data-source Declaration public string[] In { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source NiceName Nice name - usually an override to an internal class-name which shouldn't change any more but is not correct from the current wording - like ContentTypeFilter instead of EntityTypeFilter. If not specified, the UI will use the normal name instead. Declaration public string NiceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source PreviousNames Names this DataSource may have had previously. This was introduced when we standardized the names, and still had historic data using old names. Declaration public string[] PreviousNames { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source Type A primary type of this source, which determines a default icon + some standard help-text Declaration public DataSourceType Type { get; set; } Property Value Type Description DataSourceType The type, from the DataSourceType enum Implements System.Runtime.InteropServices._Attribute"
  },
  "api/ToSic.Eav.DataSources.OwnerFilter.html": {
    "href": "api/ToSic.Eav.DataSources.OwnerFilter.html",
    "title": "Class OwnerFilter | 2sxc and EAV 10",
    "keywords": "Class OwnerFilter Filter entities to show Drafts or only Published Entities Inheritance System.Object HasLog BaseDataSource OwnerFilter Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.OwnerFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Security, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.OwnerFilter\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-OwnerFilter\")] public class OwnerFilter : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Identity The identity of the user to filter by. Uses the Identity-token convention like dnn:1 is the user #1 in the DNN DB Declaration public string Identity { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.DataSources.VisualQuery.DataSourceType.html": {
    "href": "api/ToSic.Eav.DataSources.VisualQuery.DataSourceType.html",
    "title": "Enum DataSourceType | 2sxc and EAV 10",
    "keywords": "Enum DataSourceType Describes what a DataSource is for in the visual query (for logical grouping) Namespace : ToSic.Eav.DataSources.VisualQuery Assembly : ToSic.Eav.DataSources.dll Syntax public enum DataSourceType Fields Name Description Cache Filter Logic Lookup Modify Security Sort Source Target"
  },
  "api/ToSic.Eav.DataSources.ItemFilterDuplicates.html": {
    "href": "api/ToSic.Eav.DataSources.ItemFilterDuplicates.html",
    "title": "Class ItemFilterDuplicates | 2sxc and EAV 10",
    "keywords": "Class ItemFilterDuplicates A DataSource that merges two streams Inheritance System.Object HasLog BaseDataSource ItemFilterDuplicates Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.ItemFilterDuplicates, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, DynamicOut = false, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-ItemFilterDuplicates\")] public sealed class ItemFilterDuplicates : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.DataSources.IDataTarget.html": {
    "href": "api/ToSic.Eav.DataSources.IDataTarget.html",
    "title": "Interface IDataTarget | 2sxc and EAV 10",
    "keywords": "Interface IDataTarget Represents a data source that can be the recipient of Data. This basically means it has an In IDataStream Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax public interface IDataTarget Properties | Improve this Doc View Source In List of all In connections Declaration IDictionary<string, IDataStream> In { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > Methods | Improve this Doc View Source Attach(String, IDataSource) Add a single named stream to the In Declaration void Attach(string streamName, IDataSource dataSource) Parameters Type Name Description System.String streamName In-name of the stream IDataSource dataSource The data source - will use it's default out | Improve this Doc View Source Attach(String, IDataStream) Add a single named stream to the In Declaration void Attach(string streamName, IDataStream dataStream) Parameters Type Name Description System.String streamName In-name of the stream IDataStream dataStream The data stream to attach | Improve this Doc View Source Attach(IDataSource) Attach a DataSource to In - replaces all existing in-streams. Declaration void Attach(IDataSource dataSource) Parameters Type Name Description IDataSource dataSource DataSource to attach"
  },
  "api/ToSic.Eav.LookUp.LookUpInEntity.html": {
    "href": "api/ToSic.Eav.LookUp.LookUpInEntity.html",
    "title": "Class LookUpInEntity | 2sxc and EAV 10",
    "keywords": "Class LookUpInEntity Get Values from Assigned Entities Inheritance System.Object LookUpBase LookUpInEntity LookUpInMetadata Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Tokens.dll Syntax public class LookUpInEntity : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInEntity(IEntity, String) Constructs a new Entity LookUp Declaration public LookUpInEntity(IEntity source, string name = \"entity source without name\") Parameters Type Name Description IEntity source System.String name Name of the LookUp, e.g. Settings Fields | Improve this Doc View Source Entity Declaration protected IEntity Entity Field Value Type Description IEntity Methods | Improve this Doc View Source Get(String, String, ref Boolean) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format, ref bool notFound) Parameters Type Name Description System.String key Name of the Property System.String format Format String System.Boolean notFound referenced Bool to set if Property was not found on AssignedEntity Returns Type Description System.String A string with the result, empty-string if not found. Overrides LookUpBase.Get(String, String, ref Boolean) | Improve this Doc View Source Has(String) Checks if this value provider has a key. Declaration public override bool Has(string key) Parameters Type Name Description System.String key The key to check Returns Type Description System.Boolean true if found, false if not Overrides LookUpBase.Has(String) Implements ILookUp"
  },
  "api/ToSic.Eav.Metadata.Target.html": {
    "href": "api/ToSic.Eav.Metadata.Target.html",
    "title": "Class Target | 2sxc and EAV 10",
    "keywords": "Class Target Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Inheritance System.Object Target Implements ITarget Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax public class Target : ITarget Constructors | Improve this Doc View Source Target() Constructor for a new MetadataFor, which is empty. So it's not for anything, or the specs will be added afterwards. Declaration public Target() | Improve this Doc View Source Target(ITarget) Constructor to copy an existing MetadataFor object. Declaration public Target(ITarget originalToCopy) Parameters Type Name Description ITarget originalToCopy Properties | Improve this Doc View Source IsMetadata Will return true if a target-type was assigned Declaration [JsonIgnore] public bool IsMetadata { get; } Property Value Type Description System.Boolean | Improve this Doc View Source KeyGuid The KeyGuid is null or the guid of the key as stored in \"Key\" Declaration public Guid? KeyGuid { get; set; } Property Value Type Description System.Nullable < System.Guid > | Improve this Doc View Source KeyNumber The KeyNumber is null or the int of the key as stored in \"Key\" Declaration public int? KeyNumber { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source KeyString The KeyString is null or the string of the key as stored in \"Key\" Declaration public string KeyString { get; set; } Property Value Type Description System.String | Improve this Doc View Source TargetType This is the AssignmentObjectTypeId - usually 1 (none), 2 (attribute), 4 (entity) Declaration public int TargetType { get; set; } Property Value Type Description System.Int32 Implements ITarget"
  },
  "api/ToSic.Eav.Data.IContentType.html": {
    "href": "api/ToSic.Eav.Data.IContentType.html",
    "title": "Interface IContentType | 2sxc and EAV 10",
    "keywords": "Interface IContentType Represents a Content Type information (the schema) used for IEntity objects. Inherited Members IInApp.AppId Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IContentType : IInApp Properties | Improve this Doc View Source Attributes Dictionary with all Attribute Definitions Declaration IList<IContentTypeAttribute> Attributes { get; set; } Property Value Type Description System.Collections.Generic.IList < IContentTypeAttribute > | Improve this Doc View Source ContentTypeId Get the id of the Content Type - you usually don't need this! Declaration int ContentTypeId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Description The content-type description Declaration string Description { get; } Property Value Type Description System.String | Improve this Doc View Source IsDynamic Determines if the data for this type is dynamic (stored as JSON) or EAV (split into sql-tables) Declaration bool IsDynamic { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] A simple indexer to get an attribute Declaration IContentTypeAttribute this[string fieldName] { get; } Parameters Type Name Description System.String fieldName Property Value Type Description IContentTypeAttribute The IContentTypeAttribute of the field name | Improve this Doc View Source Metadata Get the metadata for this content-type Declaration ContentTypeMetadata Metadata { get; } Property Value Type Description ContentTypeMetadata Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Name Gets the Display Name of the Content Type Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source RepositoryAddress Information / ID / URL to this content-type where it was stored in the repository Declaration string RepositoryAddress { get; } Property Value Type Description System.String | Improve this Doc View Source RepositoryType Information where the Content-Type was stored (file system, DB, etc.) Declaration RepositoryTypes RepositoryType { get; } Property Value Type Description ToSic.Eav.Repositories.RepositoryTypes | Improve this Doc View Source Scope Get the scope of the Content Type (like sections in a DB) Declaration string Scope { get; } Property Value Type Description System.String | Improve this Doc View Source StaticName Static name - can be a GUID or a system-term for special types Declaration string StaticName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Is(String) Check if this type is the same as a name given. Will check both the name and the static name Declaration bool Is(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean"
  },
  "api/ToSic.Eav.Caching.ITimestamped.html": {
    "href": "api/ToSic.Eav.Caching.ITimestamped.html",
    "title": "Interface ITimestamped | 2sxc and EAV 10",
    "keywords": "Interface ITimestamped Provides a time stamp when something was created / updated for caching. Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax public interface ITimestamped Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number"
  },
  "api/ToSic.Eav.Data.EntityBasedWithLog.html": {
    "href": "api/ToSic.Eav.Data.EntityBasedWithLog.html",
    "title": "Class EntityBasedWithLog | 2sxc and EAV 10",
    "keywords": "Class EntityBasedWithLog A strongly typed object which gets its data from an entity, and also logs what it does. Inheritance System.Object EntityBasedType EntityBasedWithLog AppConfiguration Implements IEntityBasedType IHasLog Inherited Members EntityBasedType.Entity EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public abstract class EntityBasedWithLog : EntityBasedType, IEntityBasedType, IHasLog Constructors | Improve this Doc View Source EntityBasedWithLog(IEntity, ILog, String) An entity based type which also logs what it does Declaration protected EntityBasedWithLog(IEntity entity, ILog parentLog, string logName) Parameters Type Name Description IEntity entity entity which will be the foundation of this type ILog parentLog parent log to chain System.String logName Name for the logger Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration public ILog Log { get; } Property Value Type Description ILog Implements IEntityBasedType IHasLog"
  },
  "api/ToSic.Eav.Caching.ICacheExpiring.html": {
    "href": "api/ToSic.Eav.Caching.ICacheExpiring.html",
    "title": "Interface ICacheExpiring | 2sxc and EAV 10",
    "keywords": "Interface ICacheExpiring Marks objects which are cache-based, and which may contain obsolete cached data. Inherited Members ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax public interface ICacheExpiring : ITimestamped Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same"
  },
  "api/ToSic.Eav.Apps.IInAppAndZone.html": {
    "href": "api/ToSic.Eav.Apps.IInAppAndZone.html",
    "title": "Interface IInAppAndZone | 2sxc and EAV 10",
    "keywords": "Interface IInAppAndZone This thing belongs to an App and a Zone Inherited Members IInZone.ZoneId IInApp.AppId Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax public interface IInAppAndZone : IInZone, IInApp Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids"
  },
  "api/ToSic.Eav.DataSources.ValueSort.html": {
    "href": "api/ToSic.Eav.DataSources.ValueSort.html",
    "title": "Class ValueSort | 2sxc and EAV 10",
    "keywords": "Class ValueSort Sort Entity by values in specified Attributes Inheritance System.Object HasLog BaseDataSource ValueSort Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.ValueSort, ToSic.Eav.DataSources\", Type = DataSourceType.Sort, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.ValueSort\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-ValueSort\")] public sealed class ValueSort : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Attributes The attribute whose value will be sorted by. Declaration public string Attributes { get; set; } Property Value Type Description System.String | Improve this Doc View Source Directions The sorting direction like 'asc' or 'desc', can also be 0, 1 Declaration public string Directions { get; set; } Property Value Type Description System.String | Improve this Doc View Source Languages Language to filter for. At the moment it is not used, or it is trying to find \"any\" Declaration public string Languages { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Sxc.Blocks.IView.html": {
    "href": "api/ToSic.Sxc.Blocks.IView.html",
    "title": "Interface IView | 2sxc and EAV 10",
    "keywords": "Interface IView Defines a view configuration which is loaded from an EntityBasedType . Inherited Members IEntityBasedType.Entity IEntityBasedType.Title IEntityBasedType.Id IEntityBasedType.Guid Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax public interface IView : IEntityBasedType Properties | Improve this Doc View Source IsHidden Determine if we should hide this view/template from the pick-UI. Declaration bool IsHidden { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Location Location of the template - in the current tenant/portal or global/shared location. Declaration string Location { get; } Property Value Type Description System.String | Improve this Doc View Source Name The name, localized in the current UI language. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Path Path to teh template Declaration string Path { get; } Property Value Type Description System.String | Improve this Doc View Source Query The query which provides data to this view. Declaration IEntity Query { get; } Property Value Type Description IEntity | Improve this Doc View Source Type The underlying type name of the template, ATM they are unfortunately hard-coded as \"C# Razor\" and \"Token\" Declaration string Type { get; } Property Value Type Description System.String | Improve this Doc View Source UrlIdentifier An identifier which could occur in the url, causing the view to automatically switch to this one. Declaration string UrlIdentifier { get; } Property Value Type Description System.String | Improve this Doc View Source UseForList Determines if the view should behave as a list or not. Views that are lists also have Header configuration and treat content in a special way. Declaration bool UseForList { get; } Property Value Type Description System.Boolean"
  },
  "api/ToSic.Eav.DataSources.IDataStream.html": {
    "href": "api/ToSic.Eav.DataSources.IDataStream.html",
    "title": "Interface IDataStream | 2sxc and EAV 10",
    "keywords": "Interface IDataStream Represents a DataStream object. This is a stream of IEntity objects, which has a source and a name. A stream can be read from, and it can be attached to upstream data-sources for further processing. Inherited Members System.Collections.Generic.IEnumerable<ToSic.Eav.Data.IEntity>.GetEnumerator() Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax public interface IDataStream : ICanSelfCache, ICanPurgeListCache, IEnumerable<IEntity>, IEnumerable Properties | Improve this Doc View Source List The list of items in this stream. Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > An System.Collections.Generic.IEnumerable<T> of IEntity items. | Improve this Doc View Source Name Name of this Stream Declaration string Name { get; } Property Value Type Description System.String The name - which would be used in the Source to get the same stream again. | Improve this Doc View Source Source Underlying IDataSource providing the IEntity of this stream Declaration IDataSource Source { get; } Property Value Type Description IDataSource The underlying IDataSource"
  },
  "api/ToSic.Sxc.Data.IDynamicEntity.html": {
    "href": "api/ToSic.Sxc.Data.IDynamicEntity.html",
    "title": "Interface IDynamicEntity | 2sxc and EAV 10",
    "keywords": "Interface IDynamicEntity This is a wrapper for IEntity objects. It provides nicer access to underlying properties and automatically handles things like multi-language etc. The underlying IEntity IEntity is in the Entity property. Normally you will use it without caring about these internals. Please check How to Use a Dynamic Entity Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax public interface IDynamicEntity : IDynamicEntity Properties | Improve this Doc View Source Entity The underlying entity which provides all the data for the DynamicEntity Declaration IEntity Entity { get; } Property Value Type Description IEntity An Entity object. | Improve this Doc View Source EntityGuid The guid of the underlying entity. Declaration Guid EntityGuid { get; } Property Value Type Description System.Guid The same Guid as you would get from .Entity.EntityGuid | Improve this Doc View Source EntityId The ID of the underlying entity. Use it for edit-functionality or just to have a unique number for this item. Declaration int EntityId { get; } Property Value Type Description System.Int32 The same Id as you would get from .Entity.EntityId | Improve this Doc View Source EntityTitle The title of this item. This is always available no matter what the underlying field for the title is. Declaration object EntityTitle { get; } Property Value Type Description System.Object The title of the underlying entity. In rare cases it can be null. | Improve this Doc View Source IsDemoItem Many templates show demo data. If the template code must know if it's the demo item or real data, use IsDemoItem. Added in 2sxc 10.07. Declaration bool IsDemoItem { get; } Property Value Type Description System.Boolean True if this is the item configured in the view-settings, false if not. Remarks New in 10.06 | Improve this Doc View Source Presentation Contains presentation settings for an item - if they exist. This is a functionality of the CMS, where an instance of an item can be configured to show in a specific way. Normally it's used when something like an address has various show-settings (like how the map should visualize this address). The presentation-info is therefor not-null IF the content belongs to this module instance the view-configuration of this module is configured to have presentation items there is either a default presentation configured in the view, or the user has manually edited the presentation settings Declaration dynamic Presentation { get; } Property Value Type Description System.Object An IDynamicEntity with the presentation item (or the demo-presentation), otherwise null. Methods | Improve this Doc View Source Get(String) Get a value of the entity. Usually you will NOT use this, because the default access is usually content.FirstName - which will give you the same things as content.Get(\"FirstName\"). The only reason to use this is when you dynamically assemble the field name in your code, like when using App.Resources or similar use cases. Declaration dynamic Get(string name) Parameters Type Name Description System.String name Returns Type Description System.Object An object which can be either a string, number, boolean or List<IDynamicEntity>, depending on the field type. Will return null if the field was not found. | Improve this Doc View Source GetDraft() Get the draft item of this item if this is a content-item which is published, and has a draft. Declaration dynamic GetDraft() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source GetPublished() Get the published item of this item if this is a content-item which is draft, and has a published. Declaration dynamic GetPublished() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source Parents(String, String) A dynamic list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you should just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration List<IDynamicEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type Optional type filter - would only return items of this type. System.String field Optional field filter - would only return items that point to the current item in a specific field name. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 9.42"
  },
  "api/ToSic.Sxc.Blocks.html": {
    "href": "api/ToSic.Sxc.Blocks.html",
    "title": "Namespace ToSic.Sxc.Blocks | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Blocks A unit of output it 2sxc is called a Block . In DNN-Link, this can be like a Module , except that blocks can be inside other blocks. Looking at it from the Platform like DNN, the entry object is an ICmsBlock which contains context information (in DNNs case, ModuleId etc.). Inside it is an IBlock which can itself contain more IBlocks. Note that each Block itself has Views IView and data specific to that block. Interfaces IBlock A unit / block of output in a CMS. IBlockDataSource A special data-source for a block, which also knows about data-publishing (to ensure page-versioning if necessary). It's not documented more, as we may still make changes to it. ICmsBlock This is kind of the master-container for a content-management block. It's the wrapper which is in the CMS (DNN), and the module will talk with this Sxc Block to get everything rendered. IView Defines a view configuration which is loaded from an EntityBasedType . Enums Purpose These are the purposes of a block as it's being built. It can be built to generate a web-view, juts for indexing or possibly also for json publishing."
  },
  "api/ToSic.Eav.Metadata.IHasMetadataSource.html": {
    "href": "api/ToSic.Eav.Metadata.IHasMetadataSource.html",
    "title": "Interface IHasMetadataSource | 2sxc and EAV 10",
    "keywords": "Interface IHasMetadataSource Marks metadata providers. This is important for things that need a source for their metadata, but won't load it till later. Inherited Members ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax public interface IHasMetadataSource : ICacheExpiring, ITimestamped Properties | Improve this Doc View Source Metadata The metadata source Declaration IMetadataSource Metadata { get; } Property Value Type Description IMetadataSource"
  },
  "api/ToSic.Eav.LookUp.html": {
    "href": "api/ToSic.Eav.LookUp.html",
    "title": "Namespace ToSic.Eav.LookUp | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.LookUp Sometimes objects need to get values from the context - like... a URL Parameter the current date/time an App Setting or Resource etc. This is done through ILookUp objects. In many cases, we need to look up a few - like when we have a configuration made with Tokens . These would look like [App:Path] or [QueryString:Ui] . The tool which takes a list of these and looks all of them up is the @ToSic.Eav.LookUp.ITokenListFiller. Classes LookUpBase Base Class to create your own LookUp Class - used by all Look-Ups. LookUpInEntity Get Values from Assigned Entities LookUpInLookUps This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation LookUpInMetadata LookUp things from metadata. This uses EAV Metadata system and will look up Metadata for something. As of now it's hardwired to look up Metadata of Entities LookUpInNameValueCollection Look-Up helper to get something from a standard .net NameValueCollection Interfaces ILookUp A key-value map which resolves keys like \"SortOrder\" to \"asc\". It's usually used to get pre-stored configuration or to get settings from the context."
  },
  "api/ToSic.Sxc.LookUp.LookUpInDynamicEntity.html": {
    "href": "api/ToSic.Sxc.LookUp.LookUpInDynamicEntity.html",
    "title": "Class LookUpInDynamicEntity | 2sxc and EAV 10",
    "keywords": "Class LookUpInDynamicEntity LookUp for creating token based templates. In addition to retrieving values, it also resolves special tokens like repeater:index repeater:isfirst etc. Inheritance System.Object LookUpInDynamicEntity Implements ILookUp Namespace : ToSic.Sxc.LookUp Assembly : ToSic.Sxc.dll Syntax public class LookUpInDynamicEntity : ILookUp Fields | Improve this Doc View Source KeyAlternator2 Declaration public const string KeyAlternator2 = \"alternator2\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator3 Declaration public const string KeyAlternator3 = \"alternator3\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator4 Declaration public const string KeyAlternator4 = \"alternator4\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator5 Declaration public const string KeyAlternator5 = \"alternator5\" Field Value Type Description System.String | Improve this Doc View Source KeyCount Declaration public const string KeyCount = \"count\" Field Value Type Description System.String | Improve this Doc View Source KeyIndex Declaration public const string KeyIndex = \"index\" Field Value Type Description System.String | Improve this Doc View Source KeyIndex1 Declaration public const string KeyIndex1 = \"index1\" Field Value Type Description System.String | Improve this Doc View Source KeyIsFirst Declaration public const string KeyIsFirst = \"isfirst\" Field Value Type Description System.String | Improve this Doc View Source KeyIsLast Declaration public const string KeyIsLast = \"islast\" Field Value Type Description System.String | Improve this Doc View Source TokenRepeater Declaration public const string TokenRepeater = \"Repeater\" Field Value Type Description System.String Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Get(String) Shorthand version, will simply return the string or a null-value Declaration public virtual string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. | Improve this Doc View Source GetProperty(String, String, CultureInfo, ref Boolean) Get Property out of NameValueCollection Declaration public string GetProperty(string strPropertyName, string strFormat, CultureInfo formatProvider, ref bool propertyNotFound) Parameters Type Name Description System.String strPropertyName System.String strFormat System.Globalization.CultureInfo formatProvider System.Boolean propertyNotFound Returns Type Description System.String Implements ILookUp"
  },
  "api/ToSic.Sxc.Engines.html": {
    "href": "api/ToSic.Sxc.Engines.html",
    "title": "Namespace ToSic.Sxc.Engines | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Engines The Engines are the part of 2sxc that create output based on data. It's basically the part that takes a full configuration, consisting of... What App What View What Template What Data - could be from a query or from the instance ...and then generates an HTML using Razor or Tokens or whatever engine may come in future. Classes EngineBase The foundation for engines - must be inherited by other engines Interfaces IEngine The sub-system in charge of taking a configuration for an instance (aka Module) a template and using all that to produce an html-string for the browser."
  },
  "api/ToSic.Eav.Data.IContentTypeAttribute.html": {
    "href": "api/ToSic.Eav.Data.IContentTypeAttribute.html",
    "title": "Interface IContentTypeAttribute | 2sxc and EAV 10",
    "keywords": "Interface IContentTypeAttribute Represents an Attribute definition in a ContentType. This is the base for attributes in IContentType Inherited Members IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType IHasPermissions.Permissions IInApp.AppId Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IContentTypeAttribute : IAttributeBase, IHasPermissions, IInApp Properties | Improve this Doc View Source AttributeId additional info for the persistence layer Declaration int AttributeId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsTitle tells us if this attribute is the title Declaration bool IsTitle { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Metadata Additional information, specs etc. about this attribute Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf | Improve this Doc View Source SortOrder position of this attribute in the list of attributes Declaration int SortOrder { get; } Property Value Type Description System.Int32"
  },
  "api/ToSic.Eav.Data.DimensionDefinition.html": {
    "href": "api/ToSic.Eav.Data.DimensionDefinition.html",
    "title": "Class DimensionDefinition | 2sxc and EAV 10",
    "keywords": "Class DimensionDefinition The definition of a dimension / language Inheritance System.Object DimensionDefinition Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class DimensionDefinition Properties | Improve this Doc View Source Active If this dimension is active. Declaration public bool Active { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key The key/id, in case of a language this would be something like \"en\" or \"en-us\". Declaration public string Key { get; set; } Property Value Type Description System.String Remarks It's always lower case | Improve this Doc View Source Name The name - in case of a language this would be something like \"English\" Declaration public string Name { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Matches(String) Compares two keys to see if they are the same. Declaration public bool Matches(string environmentKey) Parameters Type Name Description System.String environmentKey Returns Type Description System.Boolean"
  },
  "api/ToSic.Sxc.Engines.EngineBase.html": {
    "href": "api/ToSic.Sxc.Engines.EngineBase.html",
    "title": "Class EngineBase | 2sxc and EAV 10",
    "keywords": "Class EngineBase The foundation for engines - must be inherited by other engines Inheritance System.Object HasLog EngineBase RazorEngine TokenEngine Implements IHasLog IEngine Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.dll Syntax public abstract class EngineBase : HasLog, IHasLog, IEngine Constructors | Improve this Doc View Source EngineBase() Empty constructor, so it can be used in dependency injection Declaration protected EngineBase() Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration public virtual void CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IContainer, DateTime) Declaration public virtual void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos IContainer moduleInfo System.DateTime beginDate | Improve this Doc View Source Init(IView, IApp, IContainer, IDataSource, Purpose, ICmsBlock, ILog) Declaration public void Init(IView view, IApp app, IContainer envInstance, IDataSource dataSource, Purpose purpose, ICmsBlock cmsBlock, ILog parentLog) Parameters Type Name Description IView view IApp app IContainer envInstance IDataSource dataSource Purpose purpose ICmsBlock cmsBlock ILog parentLog | Improve this Doc View Source Render() Renders a template, returning a string with the rendered template. Declaration public string Render() Returns Type Description System.String The string - usually HTML - which the engine created. Implements IHasLog IEngine"
  },
  "api/ToSic.Eav.Caching.html": {
    "href": "api/ToSic.Eav.Caching.html",
    "title": "Namespace ToSic.Eav.Caching | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Caching Everything related to how the EAV caches stuff. Fairly internal tidbits, you probably won't need them. Classes SynchronizedList<T> This is an IEnumerable which relies on an up-stream cache, which may change. That would require this IEnumerable to update what it delivers. Interfaces ICacheDependent Marks something that is cache-dependent. Used for things that are themselves cached, but rely on an upstream cache. ICacheExpiring Marks objects which are cache-based, and which may contain obsolete cached data. ICacheKey Marks objects which can identify what cache it's for. For example, when parameters change what data is cached, then the cache-key can contain this parameter, so that a different cache is used based on changing parameters. ITimestamped Provides a time stamp when something was created / updated for caching."
  },
  "api/ToSic.Eav.Data.IEntity.html": {
    "href": "api/ToSic.Eav.Data.IEntity.html",
    "title": "Interface IEntity | 2sxc and EAV 10",
    "keywords": "Interface IEntity The primary data-item in the system, IEntity is a generic data-item for any kind of information. Note that it inherits IEntityLight which is the basic definition without languages, versioning, publishing etc. Inherited Members IEntityLight.EntityId IEntityLight.EntityGuid IEntityLight.MetadataFor IEntityLight.Type IEntityLight.Modified IEntityLight.Relationships IEntityLight.GetBestValue(String, Boolean) IEntityLight.GetBestValue<TVal>(String, Boolean) IEntityLight.GetBestTitle() IEntityLight.Owner IInApp.AppId IHasPermissions.Permissions Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IEntity : IEntity, IEntityLight, IInApp, IPublish<IEntity>, IHasPermissions Properties | Improve this Doc View Source Attributes All the attributes of the current Entity. Declaration Dictionary<string, IAttribute> Attributes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IAttribute > | Improve this Doc View Source Item[String] Gets an Attribute using its StaticName Declaration IAttribute this[string attributeName] { get; } Parameters Type Name Description System.String attributeName StaticName of the Attribute Property Value Type Description IAttribute A typed Attribute Object | Improve this Doc View Source Metadata Get the metadata for this item Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A typed Metadata provider for this Entity Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Title Gets the \"official\" Title-Attribute IAttribute<T> Declaration IAttribute Title { get; } Property Value Type Description IAttribute The title of this Entity. The field used is determined in the IContentType . If you need a string, use GetBestTitle() instead. | Improve this Doc View Source Version version of this entity in the repository Declaration int Version { get; } Property Value Type Description System.Int32 The version number. Methods | Improve this Doc View Source Children(String, String) Get all the children IEntity items - optionally only of a specific field and/or type Declaration List<IEntity> Children(string field = null, string type = null) Parameters Type Name Description System.String field Optional field name to access System.String type Optional type to filter for Returns Type Description System.Collections.Generic.List < IEntity > List of children, or empty list if not found | Improve this Doc View Source GetBestTitle(String[]) Best way to get the current entities title Declaration string GetBestTitle(string[] dimensions) Parameters Type Name Description System.String [] dimensions Array of dimensions/languages to use in the lookup Returns Type Description System.String The entity title as a string | Improve this Doc View Source GetBestValue(String, String[], Boolean) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages Declaration object GetBestValue(string attributeName, string[] languages, bool resolveHyperlinks = false) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in System.Boolean resolveHyperlinks If true, will try to resolve links in the value. Default is false. Returns Type Description System.Object An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship | Improve this Doc View Source GetBestValue<T>(String, String[], Boolean) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages. Will cast/convert to the expected type, or return null / default value for that type if not possible. Declaration T GetBestValue<T>(string attributeName, string[] languages, bool resolveHyperlinks = false) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in System.Boolean resolveHyperlinks If true, will try to resolve links in the value. Default is false. Returns Type Description T An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship Type Parameters Name Description T | Improve this Doc View Source Parents(String, String) Get all the parent IEntity items - optionally only of a specific type and/or referenced in a specific field Declaration List<IEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type The type name to filter for System.String field The field name where a parent references this item Returns Type Description System.Collections.Generic.List < IEntity > List of children, or empty list if not found"
  },
  "api/ToSic.Eav.Data.EntityRelationship.html": {
    "href": "api/ToSic.Eav.Data.EntityRelationship.html",
    "title": "Class EntityRelationship | 2sxc and EAV 10",
    "keywords": "Class EntityRelationship Represents a Relation between two entities, connecting a parent to a child. Inheritance System.Object EntityRelationship Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class EntityRelationship Constructors | Improve this Doc View Source EntityRelationship(IEntity, IEntity) Initializes a new instance of the EntityRelationshipItem class. Declaration public EntityRelationship(IEntity parent, IEntity child) Parameters Type Name Description IEntity parent Parent Entity IEntity child Child Entity Properties | Improve this Doc View Source Child The child item, which is referenced by the parent Declaration public IEntity Child { get; } Property Value Type Description IEntity | Improve this Doc View Source Parent The parent item, which has a reference to the child Declaration public IEntity Parent { get; } Property Value Type Description IEntity"
  },
  "api/ToSic.Eav.Caching.SynchronizedList-1.html": {
    "href": "api/ToSic.Eav.Caching.SynchronizedList-1.html",
    "title": "Class SynchronizedList<T> | 2sxc and EAV 10",
    "keywords": "Class SynchronizedList<T> This is an IEnumerable which relies on an up-stream cache, which may change. That would require this IEnumerable to update what it delivers. Inheritance System.Object SynchronizedList<T> Implements System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable ICacheDependent ICacheExpiring ITimestamped Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax public class SynchronizedList<T> : IEnumerable<T>, IEnumerable, ICacheDependent, ICacheExpiring, ITimestamped Type Parameters Name Description T The type which is enumerated, usually an IEntity Constructors | Improve this Doc View Source SynchronizedList(ICacheExpiring, Func<List<T>>) Initialized a new list which depends on another source Declaration public SynchronizedList(ICacheExpiring upstream, Func<List<T>> rebuild) Parameters Type Name Description ICacheExpiring upstream the upstream cache which can tell us if a refresh is necessary System.Func < System.Collections.Generic.List <T>> rebuild the method which rebuilds the list Fields | Improve this Doc View Source Upstream Upstream source which implements ICacheExpiring to tell this object when the data must be refreshed Declaration protected readonly ICacheExpiring Upstream Field Value Type Description ICacheExpiring Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration public bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ICacheDependent ICacheExpiring ITimestamped"
  },
  "api/ToSic.Eav.Apps.IAppDataConfiguration.html": {
    "href": "api/ToSic.Eav.Apps.IAppDataConfiguration.html",
    "title": "Interface IAppDataConfiguration | 2sxc and EAV 10",
    "keywords": "Interface IAppDataConfiguration The configuration of an app-data - usually relevant so the source will auto-filter out unpublished data for normal viewers. Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax public interface IAppDataConfiguration Properties | Improve this Doc View Source Configuration Configuration used to query data - will deliver url-parameters and other important configuration values. Declaration ITokenListFiller Configuration { get; } Property Value Type Description ToSic.Eav.LookUp.ITokenListFiller | Improve this Doc View Source ShowDrafts If this instance is allowed to show draft items This is usually dependent on the current users permissions Declaration bool ShowDrafts { get; } Property Value Type Description System.Boolean | Improve this Doc View Source VersioningEnabled If data-versioning is currently enabled Declaration bool VersioningEnabled { get; } Property Value Type Description System.Boolean"
  },
  "api/ToSic.Eav.Security.Permissions.Permission.html": {
    "href": "api/ToSic.Eav.Security.Permissions.Permission.html",
    "title": "Class Permission | 2sxc and EAV 10",
    "keywords": "Class Permission Helper object for constants related to the permissions-type Inheritance System.Object EntityBasedType Permission Implements IEntityBasedType Inherited Members EntityBasedType.Entity EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.Security.Permissions Assembly : ToSic.Eav.Core.dll Syntax public class Permission : EntityBasedType, IEntityBasedType Constructors | Improve this Doc View Source Permission(IEntity) Declaration public Permission(IEntity entity) Parameters Type Name Description IEntity entity Fields | Improve this Doc View Source FieldCondition Declaration public const string FieldCondition = \"Condition\" Field Value Type Description System.String | Improve this Doc View Source FieldGrant Declaration public const string FieldGrant = \"Grant\" Field Value Type Description System.String | Improve this Doc View Source FieldIdentity Declaration public const string FieldIdentity = \"Identity\" Field Value Type Description System.String | Improve this Doc View Source FieldOwner Declaration public const string FieldOwner = \"Owner\" Field Value Type Description System.String | Improve this Doc View Source TypeName Declaration public const string TypeName = \"PermissionConfiguration\" Field Value Type Description System.String Properties | Improve this Doc View Source Condition The condition in this permission - like \"this rule applies to admins\" The condition is usually a text-code by the hosting CMS Declaration public string Condition { get; } Property Value Type Description System.String | Improve this Doc View Source Grant The rights granted by this permission, usually a series of characters like r=read, u=update, etc. Declaration public string Grant { get; } Property Value Type Description System.String | Improve this Doc View Source Identity The identity this rule should apply to This is usually a user guid or group-id; exact specs vary based on the hosting CMS Declaration public string Identity { get; } Property Value Type Description System.String Implements IEntityBasedType"
  },
  "api/ToSic.Eav.LookUp.LookUpBase.html": {
    "href": "api/ToSic.Eav.LookUp.LookUpBase.html",
    "title": "Class LookUpBase | 2sxc and EAV 10",
    "keywords": "Class LookUpBase Base Class to create your own LookUp Class - used by all Look-Ups. Inheritance System.Object LookUpBase LookUpInEntity LookUpInLookUps LookUpInNameValueCollection Implements ILookUp Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Tokens.dll Syntax public abstract class LookUpBase : ILookUp Properties | Improve this Doc View Source Name Gets the Name of this LookUp, e.g. QueryString or PipelineSettings Declaration public string Name { get; protected set; } Property Value Type Description System.String The name which is used to identify this LookUp, like in a ToSic.Eav.LookUp.ITokenListFiller Methods | Improve this Doc View Source Get(String) Shorthand version, will simply return the string or a null-value Declaration public virtual string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. | Improve this Doc View Source Get(String, String, ref Boolean) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public abstract string Get(string key, string format, ref bool notFound) Parameters Type Name Description System.String key Name of the Property System.String format Format String System.Boolean notFound referenced Bool to set if Property was not found on AssignedEntity Returns Type Description System.String A string with the result, empty-string if not found. | Improve this Doc View Source Has(String) Checks if this value provider has a key. Declaration public abstract bool Has(string key) Parameters Type Name Description System.String key The key to check Returns Type Description System.Boolean true if found, false if not Implements ILookUp"
  },
  "api/ToSic.Eav.Metadata.IMetadataOf.html": {
    "href": "api/ToSic.Eav.Metadata.IMetadataOf.html",
    "title": "Interface IMetadataOf | 2sxc and EAV 10",
    "keywords": "Interface IMetadataOf A provider for metadata for something. So if an IEntity or an IApp has metadata, this will provide it. Inherited Members System.Collections.Generic.IEnumerable<ToSic.Eav.Data.IEntity>.GetEnumerator() IHasPermissions.Permissions Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax public interface IMetadataOf : IEnumerable<IEntity>, IEnumerable, IHasPermissions Methods | Improve this Doc View Source GetBestValue<TVal>(String, String) Get the best matching value in ALL the metadata items. Declaration TVal GetBestValue<TVal>(string name, string type = null) Parameters Type Name Description System.String name attribute name we're looking for System.String type optional type-name, if provided, will only look at metadata of that type; otherwise (or if null) will look at all metadata items and pick first match Returns Type Description TVal A typed value. Type Parameters Name Description TVal expected type, like string, int etc. | Improve this Doc View Source GetBestValue<TVal>(String, String[]) Get the best matching value in the metadata items. Declaration TVal GetBestValue<TVal>(string name, string[] types) Parameters Type Name Description System.String name attribute name we're looking for System.String [] types list of type-name in the order to check. if one of the values is null, it will then check all items no matter what type Returns Type Description TVal A typed value. Type Parameters Name Description TVal expected type, like string, int etc."
  },
  "api/ToSic.Sxc.Web.ILinkHelper.html": {
    "href": "api/ToSic.Sxc.Web.ILinkHelper.html",
    "title": "Interface ILinkHelper | 2sxc and EAV 10",
    "keywords": "Interface ILinkHelper Helpers to create links with parameters or base-tag links (important for SPAs) Namespace : ToSic.Sxc.Web Assembly : ToSic.Sxc.dll Syntax public interface ILinkHelper : ILinkHelper Methods | Improve this Doc View Source Base() A base url for the current page, for use in html-base tags Declaration string Base() Returns Type Description System.String | Improve this Doc View Source To(String, Nullable<Int32>, String) returns a link to the current page with parameters resolved in a way that DNN wants it Declaration string To(string requiresNamedParameters = null, int? pageId = default(int? ), string parameters = null) Parameters Type Name Description System.String requiresNamedParameters a helper to ensure that you must use named parameters. You shouldn't give it anything, but you must use all others like parameters: \"id=47&name=42\" System.Nullable < System.Int32 > pageId optional page ID (TabId) - if not supplied, will use current page System.String parameters the parameters either as \"/id/47/name/daniel\" or \"id=47&name=daniel\" Returns Type Description System.String"
  },
  "api/ToSic.Eav.Data.ContentTypeAttribute.html": {
    "href": "api/ToSic.Eav.Data.ContentTypeAttribute.html",
    "title": "Class ContentTypeAttribute | 2sxc and EAV 10",
    "keywords": "Class ContentTypeAttribute Defines an attribute with name and the type this attribute has. Part of of a IContentType definition. Inheritance System.Object ToSic.Eav.Data.AttributeBase ContentTypeAttribute Implements IContentTypeAttribute IAttributeBase IHasPermissions IInApp Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class ContentTypeAttribute : AttributeBase, IContentTypeAttribute, IAttributeBase, IHasPermissions, IInApp Constructors | Improve this Doc View Source ContentTypeAttribute(Int32, String, String, Boolean, Int32, Int32, IHasMetadataSource, Int32) Extended constructor when also storing the persistence Id Declaration public ContentTypeAttribute(int appId, string name, string type, bool isTitle, int attributeId, int sortOrder, IHasMetadataSource metaProvider = null, int parentApp = 0) Parameters Type Name Description System.Int32 appId System.String name System.String type System.Boolean isTitle System.Int32 attributeId System.Int32 sortOrder IHasMetadataSource metaProvider System.Int32 parentApp | Improve this Doc View Source ContentTypeAttribute(Int32, String, String, String, String, String, Nullable<Boolean>, Object) Create an attribute definition \"from scratch\" so for import-scenarios and code-created attribute definitions Declaration public ContentTypeAttribute(int appId, string name, string niceName, string type, string inputType, string notes, bool? visibleInEditUi, object defaultValue) Parameters Type Name Description System.Int32 appId System.String name System.String niceName System.String type System.String inputType System.String notes System.Nullable < System.Boolean > visibleInEditUi System.Object defaultValue Properties | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source AttributeId additional info for the persistence layer Declaration public int AttributeId { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source IsTitle tells us if this attribute is the title Declaration public bool IsTitle { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Metadata Additional information, specs etc. about this attribute Declaration public IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf | Improve this Doc View Source SortOrder position of this attribute in the list of attributes Declaration public int SortOrder { get; } Property Value Type Description System.Int32 Implements IContentTypeAttribute IAttributeBase IHasPermissions IInApp"
  },
  "api/ToSic.Eav.Apps.Assets.IFile.html": {
    "href": "api/ToSic.Eav.Apps.Assets.IFile.html",
    "title": "Interface IFile | 2sxc and EAV 10",
    "keywords": "Interface IFile Describes a file asset as provided by the underlying environment (like DNN) Inherited Members IAsset.Created IAsset.Id IAsset.Modified IAsset.Name IAsset.Path Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax public interface IFile : IAsset Properties | Improve this Doc View Source Extension The file extension of the real underlying file. Declaration string Extension { get; set; } Property Value Type Description System.String The extension, like \"pdf\" or \"jpg\" | Improve this Doc View Source Folder The folder of the file Declaration string Folder { get; set; } Property Value Type Description System.String The folder name | Improve this Doc View Source FolderId The folder ID of the file, if the underlying environment uses int IDs Declaration int FolderId { get; set; } Property Value Type Description System.Int32 an int with the id used by the environment to track this item | Improve this Doc View Source FullName The full file name of the original file Declaration string FullName { get; set; } Property Value Type Description System.String The full file name with extension. | Improve this Doc View Source Size The file size of the file, IF the underlying environment provides this. Declaration int Size { get; set; } Property Value Type Description System.Int32 the size in bytes"
  },
  "api/ToSic.Sxc.Dnn.IDnnContext.html": {
    "href": "api/ToSic.Sxc.Dnn.IDnnContext.html",
    "title": "Interface IDnnContext | 2sxc and EAV 10",
    "keywords": "Interface IDnnContext Provides information about the current context within DNN. This only applies to 2sxc running inside DNN, not inside another platform. Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.dll Syntax public interface IDnnContext Properties | Improve this Doc View Source Module The current DNN ModuleInfo. Declaration ModuleInfo Module { get; } Property Value Type Description DotNetNuke.Entities.Modules.ModuleInfo | Improve this Doc View Source Portal The current DNN Portal Settings Declaration PortalSettings Portal { get; } Property Value Type Description DotNetNuke.Entities.Portals.PortalSettings | Improve this Doc View Source Tab The current DNN TabInfo (page). We also don't like the name Tab, but that's the DNN convention. Declaration TabInfo Tab { get; } Property Value Type Description DotNetNuke.Entities.Tabs.TabInfo | Improve this Doc View Source User The current DNN User. Declaration UserInfo User { get; } Property Value Type Description DotNetNuke.Entities.Users.UserInfo"
  },
  "api/ToSic.Eav.Caching.ICacheKey.html": {
    "href": "api/ToSic.Eav.Caching.ICacheKey.html",
    "title": "Interface ICacheKey | 2sxc and EAV 10",
    "keywords": "Interface ICacheKey Marks objects which can identify what cache it's for. For example, when parameters change what data is cached, then the cache-key can contain this parameter, so that a different cache is used based on changing parameters. Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax public interface ICacheKey Properties | Improve this Doc View Source CacheFullKey Combination of the current key and all keys of upstream cached items, to create a long unique key for this context. Declaration string CacheFullKey { get; } Property Value Type Description System.String Full key containing own partial key and upstream keys. | Improve this Doc View Source CachePartialKey Unique key-id for this specific situation - could be the same for all instances, or could vary by some parameter. Declaration string CachePartialKey { get; } Property Value Type Description System.String A string which is specific to this cache-item."
  },
  "api/ToSic.Sxc.Dnn.IHtmlHelper.html": {
    "href": "api/ToSic.Sxc.Dnn.IHtmlHelper.html",
    "title": "Interface IHtmlHelper | 2sxc and EAV 10",
    "keywords": "Interface IHtmlHelper helper to quickly \"raw\" some html Namespace : ToSic.Sxc.Dnn Assembly : ToSic.SexyContent.Razor.dll Syntax public interface IHtmlHelper Methods | Improve this Doc View Source Raw(Object) Returns a HtmlString which Razor will output as Raw Html. Declaration HtmlString Raw(object stringHtml) Parameters Type Name Description System.Object stringHtml Returns Type Description System.Web.HtmlString An HtmlString object which will be not be html-encoded when added to a page with @Html.Raw(...)"
  },
  "api/ToSic.Sxc.Web.IInPageEditingSystem.html": {
    "href": "api/ToSic.Sxc.Web.IInPageEditingSystem.html",
    "title": "Interface IInPageEditingSystem | 2sxc and EAV 10",
    "keywords": "Interface IInPageEditingSystem Contains status and commands to configure the in-page editing system. Namespace : ToSic.Sxc.Web Assembly : ToSic.Sxc.dll Syntax public interface IInPageEditingSystem Properties | Improve this Doc View Source Enabled If editing is enabled or not Declaration bool Enabled { get; } Property Value Type Description System.Boolean True if enabled, false if not. Methods | Improve this Doc View Source Attribute(String, Object) Generate an HTML attribute by converting the value to JSON but only in edit mode Declaration HtmlString Attribute(string name, object value) Parameters Type Name Description System.String name the attribute name, used for ...= System.Object value the attribute value, used for =\"...\" Returns Type Description System.Web.HtmlString A string but as HtmlString, so it can be used with @Attribute(...) | Improve this Doc View Source Attribute(String, String) Generate an HTML attribute by converting the value to JSON but only in edit mode Declaration HtmlString Attribute(string name, string value) Parameters Type Name Description System.String name the attribute name, used for ...= System.String value the attribute value, used for =\"...\" Returns Type Description System.Web.HtmlString A string but as HtmlString, so it can be used with @Attribute(...) | Improve this Doc View Source ContextAttributes(IDynamicEntity, String, String, String, Nullable<Guid>) Get html-attributes to mark the current context these will be added to a wrapper tag (usually a div) so that in-page editing knows what the context is Declaration HtmlString ContextAttributes(IDynamicEntity target, string dontRelyOnParameterOrder = \"random-y023n\", string field = null, string contentType = null, Guid? newGuid = default(Guid? )) Parameters Type Name Description IDynamicEntity target the object for is part of the context System.String dontRelyOnParameterOrder this is just to ensure you will use named params for any other param System.String field the field name - in case of list-contexts System.String contentType type name for new items - usually for inner-content and list-contexts System.Nullable < System.Guid > newGuid the guid of a new item - use null for auto-generate Returns Type Description System.Web.HtmlString | Improve this Doc View Source Enable(String, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Ensure that the UI will load the correct assets to enable editing Declaration string Enable(string dontRelyOnParameterOrder = \"random-y023n\", bool? api = default(bool? ), bool? forms = default(bool? ), bool? context = default(bool? ), bool? autoToolbar = default(bool? ), bool? styles = default(bool? )) Parameters Type Name Description System.String dontRelyOnParameterOrder System.Nullable < System.Boolean > api if JS etc. should be included to enable editing API System.Nullable < System.Boolean > forms System.Nullable < System.Boolean > context If context should be added, to ensure in-instance data editing System.Nullable < System.Boolean > autoToolbar System.Nullable < System.Boolean > styles Returns Type Description System.String null - but we wanted to make sure it returns something, so you can use it in razor like @Edit.EnableUi() | Improve this Doc View Source TagToolbar(Object, String, String, String, Object, Object, Object) Generate a toolbar attribute inside an html-tag Declaration HtmlString TagToolbar(object target = null, string dontRelyOnParameterOrder = \"random-y023n\", string actions = null, string contentType = null, object prefill = null, object toolbar = null, object settings = null) Parameters Type Name Description System.Object target The item this toolbar is for, can be null System.String dontRelyOnParameterOrder Special parameter to force named-parameters for any other setting System.String actions list of actions on this toolbar, null means default actions for this item System.String contentType content-type of this toolbar, used when it offers new/add buttons System.Object prefill prefill information, for new items System.Object toolbar complex manual toolbar configuration if needed - providing this will cause actions to be ignored System.Object settings toolbar settings controlling hover etc. Returns Type Description System.Web.HtmlString If the user is an editor, it returns the attribute containing all the toolbar configuration | Improve this Doc View Source Toolbar(Object, String, String, String, Object, Object, Object) Generate a toolbar tag - must be used in normal html, not as an attribute Declaration HtmlString Toolbar(object target = null, string dontRelyOnParameterOrder = \"random-y023n\", string actions = null, string contentType = null, object prefill = null, object toolbar = null, object settings = null) Parameters Type Name Description System.Object target The item this toolbar is for, can be null System.String dontRelyOnParameterOrder Special parameter to force named-parameters for any other setting System.String actions list of actions on this toolbar, null means default actions for this item System.String contentType content-type of this toolbar, used when it offers new/add buttons System.Object prefill prefill information, for new items System.Object toolbar complex manual toolbar configuration if needed - providing this will cause actions to be ignored System.Object settings toolbar settings controlling hover etc. Returns Type Description System.Web.HtmlString If the user is an editor, it returns HTML UL tag containing all the toolbar configuration"
  },
  "api/ToSic.Eav.Apps.IAppData.html": {
    "href": "api/ToSic.Eav.Apps.IAppData.html",
    "title": "Interface IAppData | 2sxc and EAV 10",
    "keywords": "Interface IAppData An App-DataSource which also provides direct commands to edit/update/delete data. Inherited Members IDataSource.DataSourceGuid IDataSource.Out IDataSource.Item[String] IDataSource.List IDataSource.ConfigurationProvider IDataSource.Configuration IDataSource.Ready IDataSource.Name IDataSource.Cache IDataSource.CacheRelevantConfigurations IInZone.ZoneId IInApp.AppId ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICacheKey.CachePartialKey ICacheKey.CacheFullKey IDataTarget.In IDataTarget.Attach(IDataSource) IDataTarget.Attach(String, IDataSource) IDataTarget.Attach(String, IDataStream) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax public interface IAppData : IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Properties | Improve this Doc View Source Metadata Metadata is an important feature of apps. So the App DataSource automatically provides direct access to the metadata system. This allows users of the App to query metadata directly through this object. Declaration IMetadataSource Metadata { get; } Property Value Type Description IMetadataSource Methods | Improve this Doc View Source Create(String, Dictionary<String, Object>, String, ITarget) Create a new entity in the storage. Declaration void Create(string contentTypeName, Dictionary<string, object> values, string userName = null, ITarget target = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be stored System.String userName the current user name - will be logged as the author ITarget target information if this new item is to be metadata for something | Improve this Doc View Source Create(String, IEnumerable<Dictionary<String, Object>>, String) Create a bunch of new entities in one single call (much faster, because cache doesn't need to repopulate in the mean time). Declaration void Create(string contentTypeName, IEnumerable<Dictionary<string, object>> multiValues, string userName = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >> multiValues many dictionaries, each will become an own item when stored System.String userName the current user name - will be logged as the author Remarks You can't create items which are metadata with this, for that, please use the Create-one overload | Improve this Doc View Source Delete(Int32, String) Delete an existing item Declaration void Delete(int entityId, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.String userName the current user name - will be logged as the author of the change | Improve this Doc View Source Update(Int32, Dictionary<String, Object>, String) Update an existing item. Declaration void Update(int entityId, Dictionary<string, object> values, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be updated System.String userName the current user name - will be logged as the author of the change"
  },
  "api/ToSic.Eav.DataSources.Paging.html": {
    "href": "api/ToSic.Eav.DataSources.Paging.html",
    "title": "Class Paging | 2sxc and EAV 10",
    "keywords": "Class Paging A DataSource that filters Entities by Ids Inheritance System.Object HasLog BaseDataSource Paging Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.Paging, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.Paging\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Paging\")] public sealed class Paging : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source PageNumber The Page number to show - defaults to 1 Declaration public int PageNumber { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PageSize The Page size in the paging. Defaults to 10. Declaration public int PageSize { get; set; } Property Value Type Description System.Int32 Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.DataSources.AttributeFilter.html": {
    "href": "api/ToSic.Eav.DataSources.AttributeFilter.html",
    "title": "Class AttributeFilter | 2sxc and EAV 10",
    "keywords": "Class AttributeFilter DataSource to only pass through configured AttributeNames - other attributes/properties are removed from the entities. Inheritance System.Object HasLog BaseDataSource AttributeFilter Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.AttributeFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Modify, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.AttributeFilter\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-AttributeFilter\")] public class AttributeFilter : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Uses Configuration \"AttributeNames\" Properties | Improve this Doc View Source AttributeNames A string containing one or more attribute names. like \"FirstName\" or \"FirstName,LastName,Birthday\" Declaration public string AttributeNames { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.Data.ILanguage.html": {
    "href": "api/ToSic.Eav.Data.ILanguage.html",
    "title": "Interface ILanguage | 2sxc and EAV 10",
    "keywords": "Interface ILanguage Represents a Language Dimension. It's identical to an IDimension for now. Inherited Members IDimension.DimensionId IDimension.Key IDimension.ReadOnly Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface ILanguage : IDimension"
  },
  "api/ToSic.Eav.Data.IAttribute-1.html": {
    "href": "api/ToSic.Eav.Data.IAttribute-1.html",
    "title": "Interface IAttribute<T> | 2sxc and EAV 10",
    "keywords": "Interface IAttribute<T> Represents an Attribute (Property), but strongly typed Inherited Members IAttribute.Values IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IAttribute<T> : IAttribute, IAttributeBase Type Parameters Name Description T Type of the Value Properties | Improve this Doc View Source Item[Int32] Gets the Value for the specified Language/Dimension using the ID accessor. Usually not needed. Typed. Declaration T this[int languageId] { get; } Parameters Type Name Description System.Int32 languageId the language id (number) Property Value Type Description T | Improve this Doc View Source Item[Int32[]] Gets the Value for this Languages, typed Declaration T this[int[] languageIds] { get; } Parameters Type Name Description System.Int32 [] languageIds list of languages to check Property Value Type Description T | Improve this Doc View Source Item[String] Get the best/first matching value for the specified language key - typed Declaration T this[string languageKey] { get; } Parameters Type Name Description System.String languageKey The language key (string) to look for Property Value Type Description T | Improve this Doc View Source Item[String[]] Get the best/first matching value for the specified language keys - typed Declaration T this[string[] languageKeys] { get; } Parameters Type Name Description System.String [] languageKeys list of language keys Property Value Type Description T | Improve this Doc View Source Typed Gets the typed Value Objects - so the same as Values, but with the correct type Declaration IList<IValue<T>> Typed { get; } Property Value Type Description System.Collections.Generic.IList < IValue <T>> | Improve this Doc View Source TypedContents Gets the typed first/default value Declaration T TypedContents { get; } Property Value Type Description T"
  },
  "api/ToSic.Sxc.Engines.Token.TokenEngine.html": {
    "href": "api/ToSic.Sxc.Engines.Token.TokenEngine.html",
    "title": "Class TokenEngine | 2sxc and EAV 10",
    "keywords": "Class TokenEngine Rendering Engine for Token based templates (html using [Content:Title] kind of placeholders. Inheritance System.Object HasLog EngineBase TokenEngine Implements IHasLog IEngine Inherited Members EngineBase.Init(IView, IApp, IContainer, IDataSource, Purpose, ICmsBlock, ILog) EngineBase.CustomizeData() EngineBase.CustomizeSearch(Dictionary<String, List<ISearchItem>>, IContainer, DateTime) EngineBase.Render() HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Sxc.Engines.Token Assembly : ToSic.Sxc.dll Syntax [EngineDefinition(Name = \"Token\")] public class TokenEngine : EngineBase, IHasLog, IEngine Methods | Improve this Doc View Source RenderTemplate() Declaration protected override string RenderTemplate() Returns Type Description System.String Overrides ToSic.Sxc.Engines.EngineBase.RenderTemplate() Implements IHasLog IEngine"
  },
  "api/ToSic.Eav.Security.Permissions.html": {
    "href": "api/ToSic.Eav.Security.Permissions.html",
    "title": "Namespace ToSic.Eav.Security.Permissions | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Security.Permissions Classes Permission Helper object for constants related to the permissions-type Interfaces IHasPermissions Anything that uses IHasPermissions can have custom permissions. This interface provides access to the information stored in the custom permissions."
  },
  "api/ToSic.Sxc.Adam.html": {
    "href": "api/ToSic.Sxc.Adam.html",
    "title": "Namespace ToSic.Sxc.Adam | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Adam Everything related to ADAM - the automatic digital asset system in 2sxc. When you use AsAdam on any dynamic entity, you'll get @ToSic.Eav.Apps.Adam.IFolder objects which will also contain @ToSic.Eav.Apps.Adam.IFile files. Interfaces IAsset Describes an ADAM (Automatic Digital Asset Management) asset. This contains properties which both IFolder and IFile have in common. IFile An ADAM (Automatic Digital Asset Management) file IFolder An ADAM (Automatic Digital Asset Management) folder"
  },
  "api/ToSic.Eav.LookUp.LookUpInMetadata.html": {
    "href": "api/ToSic.Eav.LookUp.LookUpInMetadata.html",
    "title": "Class LookUpInMetadata | 2sxc and EAV 10",
    "keywords": "Class LookUpInMetadata LookUp things from metadata. This uses EAV Metadata system and will look up Metadata for something. As of now it's hardwired to look up Metadata of Entities Inheritance System.Object LookUpBase LookUpInEntity LookUpInMetadata Implements ILookUp Inherited Members LookUpInEntity.Entity LookUpInEntity.Has(String) LookUpBase.Name LookUpBase.Get(String) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Tokens.dll Syntax public class LookUpInMetadata : LookUpInEntity, ILookUp Constructors | Improve this Doc View Source LookUpInMetadata(String, Guid, IMetadataSource) Constructs the object with pre-filled parameters. It won't access the entity yet, because it's possible that the data-source wouldn't be ready yet. The access to the entity will only occur if it's really needed. Declaration public LookUpInMetadata(string name, Guid objectId, IMetadataSource metaDataSource) Parameters Type Name Description System.String name Name of the PropertyAccess, e.g. PipelineSettings System.Guid objectId EntityGuid of the Entity to get assigned Entities of IMetadataSource metaDataSource DataSource that provides MetaData | Improve this Doc View Source LookUpInMetadata(String, IEntity) Alternate constructor where the entity with attached metadata is already known. The attached metadata will be used as source for the look-up Declaration public LookUpInMetadata(string name, IEntity entityWithMetadata) Parameters Type Name Description System.String name Source name IEntity entityWithMetadata Entity whose metadata we'll use Methods | Improve this Doc View Source Get(String, String, ref Boolean) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format, ref bool notFound) Parameters Type Name Description System.String key Name of the Property System.String format Format String System.Boolean notFound referenced Bool to set if Property was not found on AssignedEntity Returns Type Description System.String A string with the result, empty-string if not found. Overrides LookUpInEntity.Get(String, String, ref Boolean) Implements ILookUp"
  },
  "api/ToSic.Eav.Caching.ICacheDependent.html": {
    "href": "api/ToSic.Eav.Caching.ICacheDependent.html",
    "title": "Interface ICacheDependent | 2sxc and EAV 10",
    "keywords": "Interface ICacheDependent Marks something that is cache-dependent. Used for things that are themselves cached, but rely on an upstream cache. Inherited Members ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax public interface ICacheDependent : ITimestamped Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp"
  },
  "api/ToSic.Eav.Apps.IInApp.html": {
    "href": "api/ToSic.Eav.Apps.IInApp.html",
    "title": "Interface IInApp | 2sxc and EAV 10",
    "keywords": "Interface IInApp This thing belongs to an App Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax public interface IInApp Properties | Improve this Doc View Source AppId The app id as used internally Declaration int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to"
  },
  "api/ToSic.Sxc.Blocks.IBlock.html": {
    "href": "api/ToSic.Sxc.Blocks.IBlock.html",
    "title": "Interface IBlock | 2sxc and EAV 10",
    "keywords": "Interface IBlock A unit / block of output in a CMS. Inherited Members IInZone.ZoneId IInApp.AppId Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax public interface IBlock : IInAppAndZone, IInZone, IInApp Properties | Improve this Doc View Source App Declaration IApp App { get; } Property Value Type Description IApp | Improve this Doc View Source Configuration Declaration BlockConfiguration Configuration { get; } Property Value Type Description ToSic.Sxc.Apps.Blocks.BlockConfiguration | Improve this Doc View Source Data Declaration IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource | Improve this Doc View Source IsContentApp Declaration bool IsContentApp { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Tenant Declaration ITenant Tenant { get; } Property Value Type Description ITenant | Improve this Doc View Source View Declaration IView View { get; set; } Property Value Type Description IView"
  },
  "api/ToSic.Eav.LookUp.LookUpInNameValueCollection.html": {
    "href": "api/ToSic.Eav.LookUp.LookUpInNameValueCollection.html",
    "title": "Class LookUpInNameValueCollection | 2sxc and EAV 10",
    "keywords": "Class LookUpInNameValueCollection Look-Up helper to get something from a standard .net NameValueCollection Inheritance System.Object LookUpBase LookUpInNameValueCollection Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Tokens.dll Syntax public class LookUpInNameValueCollection : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInNameValueCollection(String, NameValueCollection) Declaration public LookUpInNameValueCollection(string name, NameValueCollection list) Parameters Type Name Description System.String name System.Collections.Specialized.NameValueCollection list Methods | Improve this Doc View Source Get(String, String, ref Boolean) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format, ref bool notFound) Parameters Type Name Description System.String key Name of the Property System.String format Format String System.Boolean notFound referenced Bool to set if Property was not found on AssignedEntity Returns Type Description System.String A string with the result, empty-string if not found. Overrides LookUpBase.Get(String, String, ref Boolean) | Improve this Doc View Source Has(String) Checks if this value provider has a key. Declaration public override bool Has(string key) Parameters Type Name Description System.String key The key to check Returns Type Description System.Boolean true if found, false if not Overrides LookUpBase.Has(String) Implements ILookUp"
  },
  "api/ToSic.Eav.Metadata.ITargetTypes.html": {
    "href": "api/ToSic.Eav.Metadata.ITargetTypes.html",
    "title": "Interface ITargetTypes | 2sxc and EAV 10",
    "keywords": "Interface ITargetTypes This interface allows objects to lookup metadata-target id / name of the system. Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax public interface ITargetTypes Methods | Improve this Doc View Source GetId(String) Look up the target Id of a metadata target. These are registered somewhere (DB, file-system, etc.) Use this if you know the type-name, but need the type ID Declaration int GetId(string typeName) Parameters Type Name Description System.String typeName Returns Type Description System.Int32 the id of the target type | Improve this Doc View Source GetName(Int32) Look up the target name of a metadata target. These are registered somewhere (Db, file-system, etc.) Use this if you know the type-ID, but need the type name Declaration string GetName(int typeId) Parameters Type Name Description System.Int32 typeId the type id Returns Type Description System.String the name of the target type"
  },
  "api/ToSic.Eav.Metadata.ITarget.html": {
    "href": "api/ToSic.Eav.Metadata.ITarget.html",
    "title": "Interface ITarget | 2sxc and EAV 10",
    "keywords": "Interface ITarget Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax public interface ITarget Properties | Improve this Doc View Source IsMetadata Determines if the current thing is used as Metadata. Declaration [JsonIgnore] bool IsMetadata { get; } Property Value Type Description System.Boolean True if it's a metadata item, false if not. | Improve this Doc View Source KeyGuid A GUID key identifying a target. Declaration Guid? KeyGuid { get; } Property Value Type Description System.Nullable < System.Guid > The GUID key of the target. Null if the identifier is not a string. | Improve this Doc View Source KeyNumber A number (int) key identifying a target. Declaration int? KeyNumber { get; } Property Value Type Description System.Nullable < System.Int32 > The number key of the target. Null if the identifier is not a string. | Improve this Doc View Source KeyString A string key identifying a target. Declaration string KeyString { get; } Property Value Type Description System.String The string key of the target. Null if the identifier is not a string. | Improve this Doc View Source TargetType If this is metadata, then the target could be anything. This is an ID telling what kind of thing we're enhancing. Declaration int TargetType { get; } Property Value Type Description System.Int32 An ID from the system which registers all the types of things that can be described. See also ITargetTypes ."
  },
  "api/ToSic.Eav.Data.Language.html": {
    "href": "api/ToSic.Eav.Data.Language.html",
    "title": "Class Language | 2sxc and EAV 10",
    "keywords": "Class Language Represents a Dimension / Language Assignment Inheritance System.Object Language Implements ILanguage IDimension Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class Language : ILanguage, IDimension Properties | Improve this Doc View Source DimensionId Gets the internal DimensionId as it is stored in the DB. This is only used for scenarios where the dimensions are defined in relational data. Declaration public int DimensionId { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Key Gets the dimension Key. For languages it's usually values like en-US or de-DE Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source ReadOnly Gets whether Dimension is assigned read only. This affects the UI, so that the value cannot be edited in these dimensions. Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean Implements ILanguage IDimension"
  },
  "api/ToSic.Eav.Environment.Tenant-1.html": {
    "href": "api/ToSic.Eav.Environment.Tenant-1.html",
    "title": "Class Tenant<T> | 2sxc and EAV 10",
    "keywords": "Class Tenant<T> A tenant in the environment with a reference to the original thing. Inheritance System.Object Tenant<T> Implements ITenant Namespace : ToSic.Eav.Environment Assembly : ToSic.Eav.Apps.dll Syntax public abstract class Tenant<T> : ITenant, IHasOriginal<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Tenant(T) Declaration protected Tenant(T settings) Parameters Type Name Description T settings Properties | Improve this Doc View Source DefaultLanguage The default language code - like \"en-US\" Declaration public abstract string DefaultLanguage { get; } Property Value Type Description System.String | Improve this Doc View Source Id The tenant ID as a number (if the tenant supports it) Declaration public abstract int Id { get; } Property Value Type Description System.Int32 The DNN PortalId | Improve this Doc View Source Name The tenant name for human readability (UIs) Usually the DNN PortalName Declaration public abstract string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Original The tenant settings - usually the DNN PortalSettings Declaration public T Original { get; } Property Value Type Description T Implements ITenant"
  },
  "api/ToSic.Sxc.Engines.IEngine.html": {
    "href": "api/ToSic.Sxc.Engines.IEngine.html",
    "title": "Interface IEngine | 2sxc and EAV 10",
    "keywords": "Interface IEngine The sub-system in charge of taking a configuration for an instance (aka Module) a template and using all that to produce an html-string for the browser. Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.dll Syntax public interface IEngine Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration void CustomizeData() | Improve this Doc View Source Render() Renders a template, returning a string with the rendered template. Declaration string Render() Returns Type Description System.String The string - usually HTML - which the engine created."
  },
  "api/ToSic.Eav.LookUp.LookUpInLookUps.html": {
    "href": "api/ToSic.Eav.LookUp.LookUpInLookUps.html",
    "title": "Class LookUpInLookUps | 2sxc and EAV 10",
    "keywords": "Class LookUpInLookUps This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation Inheritance System.Object LookUpBase LookUpInLookUps Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Tokens.dll Syntax public class LookUpInLookUps : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInLookUps(String, ILookUp, ILookUp, ILookUp, ILookUp) Generate a lookup-of-lookups. Declaration public LookUpInLookUps(string name, ILookUp first, ILookUp second, ILookUp third = null, ILookUp fourth = null) Parameters Type Name Description System.String name Name to use - if stored in a list ILookUp first First LookUp source ILookUp second Second LookUp source ILookUp third Optional third ILookUp fourth Optional fourth Fields | Improve this Doc View Source Providers Declaration protected List<ILookUp> Providers Field Value Type Description System.Collections.Generic.List < ILookUp > Methods | Improve this Doc View Source Get(String, String, ref Boolean) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format, ref bool notFound) Parameters Type Name Description System.String key Name of the Property System.String format Format String System.Boolean notFound referenced Bool to set if Property was not found on AssignedEntity Returns Type Description System.String A string with the result, empty-string if not found. Overrides LookUpBase.Get(String, String, ref Boolean) | Improve this Doc View Source Has(String) Checks if this value provider has a key. Declaration public override bool Has(string key) Parameters Type Name Description System.String key The key to check Returns Type Description System.Boolean true if found, false if not Overrides LookUpBase.Has(String) Implements ILookUp"
  },
  "api/ToSic.Eav.Environment.Container-1.html": {
    "href": "api/ToSic.Eav.Environment.Container-1.html",
    "title": "Class Container<T> | 2sxc and EAV 10",
    "keywords": "Class Container<T> A base implementation of the block information wrapping the CMS specific object along with it. Inheritance System.Object Container<T> Implements IContainer Namespace : ToSic.Eav.Environment Assembly : ToSic.Eav.Apps.dll Syntax public abstract class Container<T> : IContainer, IHasOriginal<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Container(T) Declaration protected Container(T item) Parameters Type Name Description T item Properties | Improve this Doc View Source Id Block ID Declaration public abstract int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsPrimary Determines if this is a primary block (directly in the CMS) or a block within a primary block (inner content) Declaration public abstract bool IsPrimary { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Original Declaration public T Original { get; } Property Value Type Description T | Improve this Doc View Source PageId Page ID Declaration public abstract int PageId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TenantId Tenant ID Declaration public abstract int TenantId { get; } Property Value Type Description System.Int32 Implements IContainer"
  },
  "api/ToSic.Eav.DataSources.PassThrough.html": {
    "href": "api/ToSic.Eav.DataSources.PassThrough.html",
    "title": "Class PassThrough | 2sxc and EAV 10",
    "keywords": "Class PassThrough A DataSource that passes through all In Connections. Can be used con consolidate/merge multiple Sources into one. Inheritance System.Object HasLog BaseDataSource PassThrough Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.PassThrough, ToSic.Eav.DataSources\", Type = DataSourceType.Source, DynamicOut = true)] public class PassThrough : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source CachePartialKey provide a static cachekey - as there is nothing dynamic on this source to modify the cache Declaration public override string CachePartialKey { get; } Property Value Type Description System.String Overrides BaseDataSource.CachePartialKey Remarks if the key is not static (like the default setup) it will always cause errors Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Sxc.Adam.IAsset.html": {
    "href": "api/ToSic.Sxc.Adam.IAsset.html",
    "title": "Interface IAsset | 2sxc and EAV 10",
    "keywords": "Interface IAsset Describes an ADAM (Automatic Digital Asset Management) asset. This contains properties which both IFolder and IFile have in common. Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax public interface IAsset Properties | Improve this Doc View Source HasMetadata Informs the code if this asset has real metadata attached or not. Declaration bool HasMetadata { get; } Property Value Type Description System.Boolean True if this asset has metadata, false if it doesn't (in which case the Metadata property still works, but won't deliver any real values) | Improve this Doc View Source Metadata List of metadata items - will automatically contain a fake item, even if no metadata exits to help in razor template etc. Declaration dynamic Metadata { get; } Property Value Type Description System.Object An IDynamicEntity which contains the metadata, or an empty IDynamicEntity which still works if no metadata exists. | Improve this Doc View Source Type The type of this asset (folder, file, etc.) Declaration string Type { get; } Property Value Type Description System.String \"folder\", \"image\", \"document\", \"file\" depending on what it is | Improve this Doc View Source Url The path to this asset as used from external access Declaration string Url { get; } Property Value Type Description System.String The url to this asset"
  },
  "api/ToSic.Eav.Data.LazyEntities.html": {
    "href": "api/ToSic.Eav.Data.LazyEntities.html",
    "title": "Class LazyEntities | 2sxc and EAV 10",
    "keywords": "Class LazyEntities Delivers entities which are needed. It's lazy, because on initialization it only knows the Ids (int/guid) of the items to pick up, and only retrieves them when needed. Once retrieved, it will cache the result, until the up-stream reports changes. An additional optimization: in special cases where we just need the IDs for saving, it won't actually query the cache if the IDs are already known. Inheritance System.Object LazyEntities Implements System.Collections.Generic.IEnumerable < IEntity > System.Collections.IEnumerable ICacheDependent ITimestamped Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class LazyEntities : IEnumerable<IEntity>, IEnumerable, ICacheDependent, ITimestamped Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source Identifiers Identifiers of the items in the list. Build with either the Guids or the Ids, depending on what was used. Special mechanism to get identifiers to DB storage, without loading the entities themselves Declaration public IList Identifiers { get; } Property Value Type Description System.Collections.IList Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration public bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ICacheDependent ITimestamped"
  },
  "api/ToSic.Eav.Environment.html": {
    "href": "api/ToSic.Eav.Environment.html",
    "title": "Namespace ToSic.Eav.Environment | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Environment The EAV will usually be used in another environment, which knows things the EAV doesn't. Usually the EAV won't care, but in some cases, Environment will need to pass around information about what it is, it's context etc. This is made possible by the Environment namespace. Classes Container<T> A base implementation of the block information wrapping the CMS specific object along with it. Tenant<T> A tenant in the environment with a reference to the original thing. Interfaces IContainer A unit / block within the CMS. Contains all necessary identification to pass around. ITenant Describes a tenant - this is what the Environment calls a tenant (like a portal in DNN)"
  },
  "api/ToSic.Eav.DataSources.StreamFallback.html": {
    "href": "api/ToSic.Eav.DataSources.StreamFallback.html",
    "title": "Class StreamFallback | 2sxc and EAV 10",
    "keywords": "Class StreamFallback A DataSource that returns the first stream which has content Inheritance System.Object HasLog BaseDataSource StreamFallback Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.StreamFallback, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, DynamicOut = false, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-StreamFallback\")] public sealed class StreamFallback : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.DataSources.ExternalDataDataSource.html": {
    "href": "api/ToSic.Eav.DataSources.ExternalDataDataSource.html",
    "title": "Class ExternalDataDataSource | 2sxc and EAV 10",
    "keywords": "Class ExternalDataDataSource Base DataSource class for providing data from external systems Inheritance System.Object HasLog BaseDataSource ExternalDataDataSource CsvDataSource DataTableDataSource SqlDataSource Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax public abstract class ExternalDataDataSource : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public override long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number Overrides BaseDataSource.CacheTimestamp Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.Data.ValueTypes.html": {
    "href": "api/ToSic.Eav.Data.ValueTypes.html",
    "title": "Enum ValueTypes | 2sxc and EAV 10",
    "keywords": "Enum ValueTypes Attribute Type Enum Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public enum ValueTypes Fields Name Description Boolean Boolean Attribute Type Custom Custom data-type - for custom serialization, will store string DateTime DateTime Attribute Type Empty Empty for titles etc. Entity Entity Attribute Type Hyperlink Hyperlink Attribute Type Number Number Attribute Type String String Attribute Type Undefined Used for unknown cases, where you would otherwise use null"
  },
  "api/ToSic.Eav.LookUp.ILookUp.html": {
    "href": "api/ToSic.Eav.LookUp.ILookUp.html",
    "title": "Interface ILookUp | 2sxc and EAV 10",
    "keywords": "Interface ILookUp A key-value map which resolves keys like \"SortOrder\" to \"asc\". It's usually used to get pre-stored configuration or to get settings from the context. Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Tokens.dll Syntax public interface ILookUp Properties | Improve this Doc View Source Name Gets the Name of this LookUp, e.g. QueryString or PipelineSettings Declaration string Name { get; } Property Value Type Description System.String The name which is used to identify this LookUp, like in a ToSic.Eav.LookUp.ITokenListFiller Methods | Improve this Doc View Source Get(String) Shorthand version, will simply return the string or a null-value Declaration string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. | Improve this Doc View Source Get(String, String, ref Boolean) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration string Get(string key, string format, ref bool notFound) Parameters Type Name Description System.String key Name of the Property System.String format Format String System.Boolean notFound referenced Bool to set if Property was not found on AssignedEntity Returns Type Description System.String A string with the result, empty-string if not found. | Improve this Doc View Source Has(String) Checks if this value provider has a key. Declaration bool Has(string key) Parameters Type Name Description System.String key The key to check Returns Type Description System.Boolean true if found, false if not"
  },
  "api/ToSic.Eav.DataSources.VisualQuery.html": {
    "href": "api/ToSic.Eav.DataSources.VisualQuery.html",
    "title": "Namespace ToSic.Eav.DataSources.VisualQuery | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.DataSources.VisualQuery Classes VisualQueryAttribute Custom Attribute for DataSources and usage in Pipeline Designer. Will add information about help, configuration-content-types etc. Only DataSources which have this attribute will be listed in the designer-tool Enums DataSourceType Describes what a DataSource is for in the visual query (for logical grouping)"
  },
  "api/ToSic.Sxc.Adam.IFolder.html": {
    "href": "api/ToSic.Sxc.Adam.IFolder.html",
    "title": "Interface IFolder | 2sxc and EAV 10",
    "keywords": "Interface IFolder An ADAM (Automatic Digital Asset Management) folder Inherited Members IFolder.HasChildren IAsset.Created IAsset.Id IAsset.Modified IAsset.Name IAsset.Path IAsset.HasMetadata IAsset.Metadata IAsset.Url IAsset.Type Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax public interface IFolder : IFolder, IAsset, IAsset Properties | Improve this Doc View Source Files Get the files in this folder Declaration IEnumerable<IFile> Files { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IFile > A list of files in this folder as IFile | Improve this Doc View Source Folders Get the sub-folders in this folder Declaration IEnumerable<IFolder> Folders { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IFolder > A list of folders inside this folder - as IFolder ."
  },
  "api/ToSic.Sxc.Adam.IFile.html": {
    "href": "api/ToSic.Sxc.Adam.IFile.html",
    "title": "Interface IFile | 2sxc and EAV 10",
    "keywords": "Interface IFile An ADAM (Automatic Digital Asset Management) file Inherited Members IAsset.HasMetadata IAsset.Metadata IAsset.Url IAsset.Type IFile.Extension IFile.Folder IFile.FolderId IFile.FullName IFile.Size IAsset.Created IAsset.Id IAsset.Modified IAsset.Name IAsset.Path Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax public interface IFile : IAsset, IFile, IAsset"
  },
  "api/ToSic.Eav.Environment.IContainer.html": {
    "href": "api/ToSic.Eav.Environment.IContainer.html",
    "title": "Interface IContainer | 2sxc and EAV 10",
    "keywords": "Interface IContainer A unit / block within the CMS. Contains all necessary identification to pass around. Namespace : ToSic.Eav.Environment Assembly : ToSic.Eav.Apps.dll Syntax public interface IContainer Properties | Improve this Doc View Source Id Block ID Declaration int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsPrimary Determines if this is a primary block (directly in the CMS) or a block within a primary block (inner content) Declaration bool IsPrimary { get; } Property Value Type Description System.Boolean | Improve this Doc View Source PageId Page ID Declaration int PageId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TenantId Tenant ID Declaration int TenantId { get; } Property Value Type Description System.Int32"
  },
  "api/ToSic.Eav.DataSources.RelationshipFilter.html": {
    "href": "api/ToSic.Eav.DataSources.RelationshipFilter.html",
    "title": "Class RelationshipFilter | 2sxc and EAV 10",
    "keywords": "Class RelationshipFilter Filter Entities by Value in a Related Entity. For example: Find all Books (desired Entity), whose Authors (related Entity) have a Country (Attribute) with 'Switzerland' (Value). Inheritance System.Object HasLog BaseDataSource RelationshipFilter Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.RelationshipFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Lookup, In = new string[]{\"Default\", \"Fallback\"}, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.RelationshipFilter\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-RelationshipFilter\")] public sealed class RelationshipFilter : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source ChildOrParent Determines if the relationship we're looking into is a 'child'-relationship (default) or 'parent' relationship. Declaration public string ChildOrParent { get; set; } Property Value Type Description System.String | Improve this Doc View Source CompareAttribute The attribute we're looking into, in this case it would be 'Country' because we're checking what Authors are from Switzerland. Declaration public string CompareAttribute { get; set; } Property Value Type Description System.String | Improve this Doc View Source CompareMode Comparison mode. \"default\" and \"contains\" will check if such a relationship is available other modes like \"equals\" or \"exclude\" not implemented Declaration public string CompareMode { get; set; } Property Value Type Description System.String | Improve this Doc View Source Filter The filter-value that will be used - for example \"Switzerland\" when looking for authors from there Declaration public string Filter { get; set; } Property Value Type Description System.String | Improve this Doc View Source Relationship Relationship-attribute - in the example this would be 'Author' as we're checking values in related Author items. Declaration public string Relationship { get; set; } Property Value Type Description System.String | Improve this Doc View Source Separator Separator value where we have multiple values / IDs to compare. Default is 'ignore' = no separator Declaration public string Separator { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.Data.IEntitiesSource.html": {
    "href": "api/ToSic.Eav.Data.IEntitiesSource.html",
    "title": "Interface IEntitiesSource | 2sxc and EAV 10",
    "keywords": "Interface IEntitiesSource This marks something which can give a list of entities. Usually used for lazy-loading data, where the source is attached, but the data isn't loaded yet. Inherited Members ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IEntitiesSource : ICacheExpiring, ITimestamped Properties | Improve this Doc View Source List Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity >"
  },
  "api/ToSic.Sxc.Search.html": {
    "href": "api/ToSic.Sxc.Search.html",
    "title": "Namespace ToSic.Sxc.Search | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Search The things here enable searching. They basically ensure that the CMS can ask for data to then index however the CMS wants to. Classes SearchItem A search item which is passed around before handed over to the indexing system Interfaces ISearchItem Defines an item in the search system - which is prepared by Sxc, and can be customized as needed"
  },
  "api/ToSic.Sxc.Search.SearchItem.html": {
    "href": "api/ToSic.Sxc.Search.SearchItem.html",
    "title": "Class SearchItem | 2sxc and EAV 10",
    "keywords": "Class SearchItem A search item which is passed around before handed over to the indexing system Inheritance System.Object DotNetNuke.Services.Search.Entities.SearchDocumentToDelete DotNetNuke.Services.Search.Entities.SearchDocument SearchItem Implements ISearchItem Inherited Members DotNetNuke.Services.Search.Entities.SearchDocument.ToString() DotNetNuke.Services.Search.Entities.SearchDocument.Title DotNetNuke.Services.Search.Entities.SearchDocument.Description DotNetNuke.Services.Search.Entities.SearchDocument.Body DotNetNuke.Services.Search.Entities.SearchDocument.Url DotNetNuke.Services.Search.Entities.SearchDocument.ModifiedTimeUtc DotNetNuke.Services.Search.Entities.SearchDocument.IsActive DotNetNuke.Services.Search.Entities.SearchDocument.Permissions DotNetNuke.Services.Search.Entities.SearchDocument.Tags DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.UniqueKey DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.RoleId DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.PortalId DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.TabId DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.ModuleDefId DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.ModuleId DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.AuthorUserId DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.SearchTypeId DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.QueryString DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.Keywords DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.NumericKeys DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.CultureCode Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.Dnn.dll Syntax public class SearchItem : SearchDocument, ISearchItem, ISearchInfo Properties | Improve this Doc View Source Entity Declaration public IEntity Entity { get; set; } Property Value Type Description IEntity Implements ISearchItem"
  },
  "api/ToSic.Sxc.Apps.html": {
    "href": "api/ToSic.Sxc.Apps.html",
    "title": "Namespace ToSic.Sxc.Apps | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Apps This extends the ToSic.Eav.Apps with things relevant in a CMS. Most of this isn't documented yet. Classes AppConfiguration The configuration of the app, as you can set it in the app-package definition. Interfaces IApp An app-object as is available in a razor template or WebApi"
  },
  "api/ToSic.Eav.Data.IRelationshipManager.html": {
    "href": "api/ToSic.Eav.Data.IRelationshipManager.html",
    "title": "Interface IRelationshipManager | 2sxc and EAV 10",
    "keywords": "Interface IRelationshipManager Manages relationships of an entity - to it's children and parents. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IRelationshipManager Properties | Improve this Doc View Source AllChildren Get all Child Entities Declaration IEnumerable<IEntity> AllChildren { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > List of all Entities referenced by this Entity. | Improve this Doc View Source AllParents Get all Parent Entities Declaration IEnumerable<IEntity> AllParents { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > List of all Entities referencing this Entity. Methods | Improve this Doc View Source FindChildren(String, String, ILog) Find the children with optional criteria. Declaration List<IEntity> FindChildren(string field = null, string type = null, ILog log = null) Parameters Type Name Description System.String field Get only the children of a specific field System.String type Restrict the results to a specific ContentType ILog log Optional logger, to debug what happens internally Returns Type Description System.Collections.Generic.List < IEntity > Always returns a list - empty or containing results | Improve this Doc View Source FindParents(String, String, ILog) Find the parents with optional criteria. Declaration List<IEntity> FindParents(string type = null, string field = null, ILog log = null) Parameters Type Name Description System.String type Restrict the results to a specific ContentType System.String field Get only the children of a specific field ILog log Optional logger, to debug what happens internally Returns Type Description System.Collections.Generic.List < IEntity > Always returns a list - empty or containing results"
  },
  "api/ToSic.Eav.Logging.IHasLog.html": {
    "href": "api/ToSic.Eav.Logging.IHasLog.html",
    "title": "Interface IHasLog | 2sxc and EAV 10",
    "keywords": "Interface IHasLog Objects which can log their activity, and share their log with other objects in the chain to produce extensive internal logging. Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax public interface IHasLog Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration ILog Log { get; } Property Value Type Description ILog"
  },
  "api/ToSic.Eav.Metadata.IRemoteMetadata.html": {
    "href": "api/ToSic.Eav.Metadata.IRemoteMetadata.html",
    "title": "Interface IRemoteMetadata | 2sxc and EAV 10",
    "keywords": "Interface IRemoteMetadata This interface allows objects to provide metadata from \"remote\" systems meaning from apps / sources which the original source doesn't know about Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax public interface IRemoteMetadata Methods | Improve this Doc View Source OfApp(Int32) Get a metadata provider which uses data from a known app, where the zone is not known Declaration IMetadataSource OfApp(int appId) Parameters Type Name Description System.Int32 appId the app id Returns Type Description IMetadataSource A IMetadataSource of that app | Improve this Doc View Source OfZoneAndApp(Int32, Int32) Get a metadata provider which uses data from a known zone and app Declaration IMetadataSource OfZoneAndApp(int zoneId, int appId) Parameters Type Name Description System.Int32 zoneId the zone id System.Int32 appId the app id Returns Type Description IMetadataSource A IMetadataSource of that zone/app"
  },
  "api/ToSic.Eav.Metadata.IMetadataSource.html": {
    "href": "api/ToSic.Eav.Metadata.IMetadataSource.html",
    "title": "Interface IMetadataSource | 2sxc and EAV 10",
    "keywords": "Interface IMetadataSource For querying metadata from the data source. Mainly used in the Store, Cache-Systems and Apps. Inherited Members ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax public interface IMetadataSource : ICacheExpiring, ITimestamped Methods | Improve this Doc View Source Get<T>(Int32, T, String) Get any metadata of the current data source (usually an app) Declaration IEnumerable<IEntity> Get<T>(int targetType, T key, string contentTypeName = null) Parameters Type Name Description System.Int32 targetType The type-id of the target we're accessing, like 10=cms-object, 4=entity T key The key which is used for lookup System.String contentTypeName Optional content-type name, to only retrieve metadata of that type Returns Type Description System.Collections.Generic.IEnumerable < IEntity > A list (may be empty) of metadata items found for this target Type Parameters Name Description T Key-Type used - string, int or guid"
  },
  "api/ToSic.Eav.Data.ContentTypeMetadata.html": {
    "href": "api/ToSic.Eav.Data.ContentTypeMetadata.html",
    "title": "Class ContentTypeMetadata | 2sxc and EAV 10",
    "keywords": "Class ContentTypeMetadata Provides metadata for a content type. This can be very special, because ContentTypes can be shared (ghosts), in which case the metadata must be retrieved from another \"remote\" location (where the original is defined). Inheritance System.Object MetadataOf < System.String > ContentTypeMetadata Implements IMetadataOf System.Collections.Generic.IEnumerable < IEntity > System.Collections.IEnumerable IHasPermissions Inherited Members MetadataOf<String>.Key MetadataOf<String>.Permissions MetadataOf<String>.GetBestValue<TVal>(String, String) MetadataOf<String>.GetBestValue<TVal>(String, String[]) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class ContentTypeMetadata : MetadataOf<string>, IMetadataOf, IEnumerable<IEntity>, IEnumerable, IHasPermissions, IMetadataInternals Constructors | Improve this Doc View Source ContentTypeMetadata(String, Int32, Int32) Used in cases where the metadata provider isn't known, but the IDs are known Declaration public ContentTypeMetadata(string typeId, int sourceZoneId, int sourceAppId) Parameters Type Name Description System.String typeId type id / static-name System.Int32 sourceZoneId the zone which has the metadata System.Int32 sourceAppId the app which has the metadata | Improve this Doc View Source ContentTypeMetadata(String, IHasMetadataSource) Used in cases where the metadata-provider is already known Declaration public ContentTypeMetadata(string typeId, IHasMetadataSource metaProvider) Parameters Type Name Description System.String typeId type id / static-name IHasMetadataSource metaProvider remote / deferred metadata provider Properties | Improve this Doc View Source Description Description IEntity metadata of this content-type. Declaration public IEntity Description { get; } Property Value Type Description IEntity Methods | Improve this Doc View Source LoadFromProvider() Load / initialize - needed when building the cache. Must usually be called a bit later, because the data is initialized from a cache, which in case of ghosts may be loaded a bit later. Declaration protected override void LoadFromProvider() Overrides ToSic.Eav.Metadata.MetadataOf<System.String>.LoadFromProvider() Implements IMetadataOf System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IHasPermissions"
  },
  "api/ToSic.Eav.Apps.Assets.IAsset.html": {
    "href": "api/ToSic.Eav.Apps.Assets.IAsset.html",
    "title": "Interface IAsset | 2sxc and EAV 10",
    "keywords": "Interface IAsset Any asset (file/folder) of the EAV App System. This interface contains properties which both IFolder and IFile have in common Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax public interface IAsset Properties | Improve this Doc View Source Created The creation date of the item, as reported by the environment. Declaration DateTime Created { get; set; } Property Value Type Description System.DateTime The date-time when the file was created. | Improve this Doc View Source Id The ID of the item, if the underlying environment uses int IDs Declaration int Id { get; set; } Property Value Type Description System.Int32 an int with the id used by the environment to track this item | Improve this Doc View Source Modified The modified date of the file, as reported by the environment. Declaration DateTime Modified { get; set; } Property Value Type Description System.DateTime The date-time when the file was modified last. | Improve this Doc View Source Name The asset name typically the folder or the file name Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Path The path of the item in the file system of the environment. Declaration string Path { get; set; } Property Value Type Description System.String The full path of this item"
  },
  "api/ToSic.Eav.Logging.ILog.html": {
    "href": "api/ToSic.Eav.Logging.ILog.html",
    "title": "Interface ILog | 2sxc and EAV 10",
    "keywords": "Interface ILog A logger with special capabilities. It can take log messages, and chain itself to other loggers. If chained, it can broadcast the messages to the other loggers from that time forward. Basically this is the backbone of Insights. Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax public interface ILog Methods | Improve this Doc View Source Add(Func<String>) Add a message by calling a function. This will be inside a try/catch, to prevent crashes because of looping on nulls etc. Declaration void Add(Func<string> messageMaker) Parameters Type Name Description System.Func < System.String > messageMaker | Improve this Doc View Source Add(String) Add a message log entry Declaration string Add(string message) Parameters Type Name Description System.String message Returns Type Description System.String The same warning text which was added | Improve this Doc View Source Call(String, Func<String>, Func<String>) Add a log entry for a class constructor, returning a method to call when done Declaration Action<string> Call(string methodName, Func<string> params, Func<string> message = null) Parameters Type Name Description System.String methodName System.Func < System.String > params System.Func < System.String > message Returns Type Description System.Action < System.String > | Improve this Doc View Source Call(String, String, String) Add a log entry for method call, returning a method to call when done Declaration Action<string> Call(string methodName, string params = null, string message = null) Parameters Type Name Description System.String methodName System.String params System.String message Returns Type Description System.Action < System.String > | Improve this Doc View Source Call<T>(String, String, String) Add a log entry for method call, returning a method to call when done Declaration Func<string, T, T> Call<T>(string methodName, string params = null, string message = null) Parameters Type Name Description System.String methodName System.String params System.String message Returns Type Description System.Func < System.String , T, T> Type Parameters Name Description T | Improve this Doc View Source Get(String) Add a special log entry for a Getter, returning a method to call when the get completes Declaration Action<string> Get(string property) Parameters Type Name Description System.String property Returns Type Description System.Action < System.String > | Improve this Doc View Source LinkTo(ILog, String) Link this logger to a parent and optionally rename Declaration void LinkTo(ILog parent, string name = null) Parameters Type Name Description ILog parent parent log to attach to System.String name optional new name | Improve this Doc View Source New(String, Func<String>, Func<String>) Add a log entry for a class constructor, returning a method to call when done Declaration Action<string> New(string className, Func<string> params, Func<string> message = null) Parameters Type Name Description System.String className System.Func < System.String > params System.Func < System.String > message Returns Type Description System.Action < System.String > | Improve this Doc View Source New(String, String, String) Add a log entry for a class constructor, returning a method to call when done Declaration Action<string> New(string className, string params = null, string message = null) Parameters Type Name Description System.String className System.String params System.String message Returns Type Description System.Action < System.String > | Improve this Doc View Source Rename(String) Rename this logger - usually used when a base-class has a logger, but the inherited class needs a different name Declaration void Rename(string name) Parameters Type Name Description System.String name Remarks limits the length to 6 chars to make the output readable | Improve this Doc View Source Set(String) Add a special log entry for a Setter, returning a method to call when the get completes Declaration Action<string> Set(string property) Parameters Type Name Description System.String property Returns Type Description System.Action < System.String > | Improve this Doc View Source Warn(String) Add a warning log entry Declaration string Warn(string message) Parameters Type Name Description System.String message Returns Type Description System.String The same warning text which was added"
  },
  "api/ToSic.Eav.DataSources.EntityIdFilter.html": {
    "href": "api/ToSic.Eav.DataSources.EntityIdFilter.html",
    "title": "Class EntityIdFilter | 2sxc and EAV 10",
    "keywords": "Class EntityIdFilter A DataSource that filters Entities by Ids Inheritance System.Object HasLog BaseDataSource EntityIdFilter Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.EntityIdFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Filter, DynamicOut = false, NiceName = \"ItemIdFilter\", ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.EntityIdFilter\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-ItemIdFilter\")] public class EntityIdFilter : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source EntityIds A string containing one or more entity-ids. like \"27\" or \"27,40,3063,30306\" Declaration public string EntityIds { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Sxc.Dnn.IDynamicWebApi.html": {
    "href": "api/ToSic.Sxc.Dnn.IDynamicWebApi.html",
    "title": "Interface IDynamicWebApi | 2sxc and EAV 10",
    "keywords": "Interface IDynamicWebApi This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. Inherited Members IDynamicCode.Dnn IDynamicCode.Content IDynamicCode.Header IDynamicCode.AsAdam(IDynamicEntity, String) IDynamicCode.AsAdam(IEntity, String) IDynamicCode.Link IDynamicCode.Edit IDynamicCode.AsDynamic(IEntity) IDynamicCode.AsDynamic(Object) IDynamicCode.AsDynamic(KeyValuePair<Int32, IEntity>) IDynamicCode.AsDynamic(IDataStream) IDynamicCode.AsDynamic(IEnumerable<IEntity>) IDynamicCode.AsEntity(Object) IDynamicCode.CreateSource<T>(IDataStream) IDynamicCode.CreateSource<T>(IDataSource, ITokenListFiller) Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.dll Syntax public interface IDynamicWebApi : IDynamicCode, IDynamicCode, IAppAndDataHelpers, ISharedCodeBuilder Methods | Improve this Doc View Source SaveInAdam(String, Stream, String, String, Nullable<Guid>, String, String) Save a file from a stream (usually an upload from the browser) into an adam-field Declaration IFile SaveInAdam(string dontRelyOnParameterOrder = \"random-y023n\", Stream stream = null, string fileName = null, string contentType = null, Guid? guid = default(Guid? ), string field = null, string subFolder = \"\") Parameters Type Name Description System.String dontRelyOnParameterOrder ensure that all parameters use names, so the api can change in future System.IO.Stream stream the stream System.String fileName file name to save to System.String contentType content-type of the target item (important for security checks) System.Nullable < System.Guid > guid System.String field System.String subFolder Returns Type Description IFile"
  },
  "api/ToSic.Sxc.Dnn.IDynamicCode.html": {
    "href": "api/ToSic.Sxc.Dnn.IDynamicCode.html",
    "title": "Interface IDynamicCode | 2sxc and EAV 10",
    "keywords": "Interface IDynamicCode This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. Inherited Members IDynamicCode.Content IDynamicCode.Header IDynamicCode.AsAdam(IDynamicEntity, String) IDynamicCode.AsAdam(IEntity, String) IDynamicCode.Link IDynamicCode.Edit IDynamicCode.AsDynamic(IEntity) IDynamicCode.AsDynamic(Object) IDynamicCode.AsDynamic(KeyValuePair<Int32, IEntity>) IDynamicCode.AsDynamic(IDataStream) IDynamicCode.AsDynamic(IEnumerable<IEntity>) IDynamicCode.AsEntity(Object) IDynamicCode.CreateSource<T>(IDataStream) IDynamicCode.CreateSource<T>(IDataSource, ITokenListFiller) Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.dll Syntax public interface IDynamicCode : IDynamicCode, IAppAndDataHelpers, ISharedCodeBuilder Properties | Improve this Doc View Source Dnn The DNN context. Declaration IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context."
  },
  "api/ToSic.Eav.Environment.ITenant.html": {
    "href": "api/ToSic.Eav.Environment.ITenant.html",
    "title": "Interface ITenant | 2sxc and EAV 10",
    "keywords": "Interface ITenant Describes a tenant - this is what the Environment calls a tenant (like a portal in DNN) Namespace : ToSic.Eav.Environment Assembly : ToSic.Eav.Apps.dll Syntax public interface ITenant Properties | Improve this Doc View Source DefaultLanguage The default language code - like \"en-US\" Declaration string DefaultLanguage { get; } Property Value Type Description System.String | Improve this Doc View Source Id The tenant ID as a number (if the tenant supports it) Declaration int Id { get; } Property Value Type Description System.Int32 The DNN PortalId | Improve this Doc View Source Name The tenant name for human readability (UIs) Usually the DNN PortalName Declaration string Name { get; } Property Value Type Description System.String"
  },
  "api/ToSic.Eav.DataSources.Shuffle.html": {
    "href": "api/ToSic.Eav.DataSources.Shuffle.html",
    "title": "Class Shuffle | 2sxc and EAV 10",
    "keywords": "Class Shuffle A DataSource that filters Entities by Ids Inheritance System.Object HasLog BaseDataSource Shuffle Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.Shuffle, ToSic.Eav.DataSources\", Type = DataSourceType.Sort, DynamicOut = false, ExpectsDataOfType = \"38e7822b-1049-4539-bb3f-f99949b1b1d1\", Icon = \"shuffle\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Shuffle\")] public sealed class Shuffle : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Take Amount of items to take / return when shuffling. Defaults to 0. Declaration public int Take { get; set; } Property Value Type Description System.Int32 Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.DataSources.EntityTypeFilter.html": {
    "href": "api/ToSic.Eav.DataSources.EntityTypeFilter.html",
    "title": "Class EntityTypeFilter | 2sxc and EAV 10",
    "keywords": "Class EntityTypeFilter Return only entities of a specific content-type Inheritance System.Object HasLog BaseDataSource EntityTypeFilter Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.EntityTypeFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Filter, DynamicOut = false, NiceName = \"ContentTypeFilter\", ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.EntityTypeFilter\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-ContentTypeFilter\")] public class EntityTypeFilter : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source TypeName The name of the type to filter for. Either the normal name or the 'StaticName' which is usually a GUID. Declaration public string TypeName { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.Data.IDimension.html": {
    "href": "api/ToSic.Eav.Data.IDimension.html",
    "title": "Interface IDimension | 2sxc and EAV 10",
    "keywords": "Interface IDimension Represents a Dimension to assign values to. Dimensions are usually languages ( ILanguage ), but in future they could also be multi-dimensional, like values which are mapped to a language and to a specific edition, use case, etc. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IDimension Properties | Improve this Doc View Source DimensionId Gets the internal DimensionId as it is stored in the DB. This is only used for scenarios where the dimensions are defined in relational data. Declaration int DimensionId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Key Gets the dimension Key. For languages it's usually values like en-US or de-DE Declaration string Key { get; } Property Value Type Description System.String | Improve this Doc View Source ReadOnly Gets whether Dimension is assigned read only. This affects the UI, so that the value cannot be edited in these dimensions. Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean"
  },
  "api/ToSic.Sxc.Engines.Token.html": {
    "href": "api/ToSic.Sxc.Engines.Token.html",
    "title": "Namespace ToSic.Sxc.Engines.Token | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Engines.Token Classes TokenEngine Rendering Engine for Token based templates (html using [Content:Title] kind of placeholders."
  },
  "api/ToSic.Eav.Apps.IInZone.html": {
    "href": "api/ToSic.Eav.Apps.IInZone.html",
    "title": "Interface IInZone | 2sxc and EAV 10",
    "keywords": "Interface IInZone This things belongs to a Zone Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax public interface IInZone Properties | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to"
  },
  "api/ToSic.Sxc.Search.ISearchItem.html": {
    "href": "api/ToSic.Sxc.Search.ISearchItem.html",
    "title": "Interface ISearchItem | 2sxc and EAV 10",
    "keywords": "Interface ISearchItem Defines an item in the search system - which is prepared by Sxc, and can be customized as needed Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.dll Syntax public interface ISearchItem : ISearchInfo Properties | Improve this Doc View Source Body Contents of this item - will be indexed Declaration string Body { get; set; } Property Value Type Description System.String | Improve this Doc View Source CultureCode Culture code, for language sensitive searches Declaration string CultureCode { get; set; } Property Value Type Description System.String | Improve this Doc View Source Description Description in search results Declaration string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Entity The underlying data in the search Declaration IEntity Entity { get; set; } Property Value Type Description IEntity | Improve this Doc View Source IsActive Determines if this item should appear in search or be ignored Declaration bool IsActive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ModifiedTimeUtc Timestamp in GMT / UTC Declaration DateTime ModifiedTimeUtc { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source QueryString Query String params to access this item Declaration string QueryString { get; set; } Property Value Type Description System.String | Improve this Doc View Source Title Title in search results Declaration string Title { get; set; } Property Value Type Description System.String | Improve this Doc View Source UniqueKey Declaration string UniqueKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source Url Url to go to, when looking at the details of this search result Declaration string Url { get; set; } Property Value Type Description System.String"
  },
  "api/ToSic.Eav.Metadata.MetadataOf-1.html": {
    "href": "api/ToSic.Eav.Metadata.MetadataOf-1.html",
    "title": "Class MetadataOf<T> | 2sxc and EAV 10",
    "keywords": "Class MetadataOf<T> Metadata of an item (a content-type or another entity). It's usually on a Metadata property of things that can have metadata. Inheritance System.Object MetadataOf<T> ContentTypeMetadata Implements IMetadataOf System.Collections.Generic.IEnumerable < IEntity > System.Collections.IEnumerable IHasPermissions Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax public class MetadataOf<T> : IMetadataOf, IEnumerable<IEntity>, IEnumerable, IHasPermissions, IMetadataInternals Type Parameters Name Description T The type this metadata uses as a key - int, string, guid Constructors | Improve this Doc View Source MetadataOf(Int32, T, Int32, Int32) initialize using keys to the metadata-environment, for lazy retrieval Declaration public MetadataOf(int itemType, T key, int remoteZoneId, int remoteAppId) Parameters Type Name Description System.Int32 itemType T key System.Int32 remoteZoneId System.Int32 remoteAppId | Improve this Doc View Source MetadataOf(Int32, T, IHasMetadataSource) initialize using a prepared metadata source Declaration public MetadataOf(int itemType, T key, IHasMetadataSource metaProvider) Parameters Type Name Description System.Int32 itemType T key IHasMetadataSource metaProvider Properties | Improve this Doc View Source Key The key which identifies the item we're enriching with metadata Declaration public T Key { get; } Property Value Type Description T | Improve this Doc View Source Permissions Permissions are also stored as entity items. Declaration public IEnumerable<Permission> Permissions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Permission > List of permission entities for an item Remarks Currently still a private API, because the type could change to be a typed permission object Methods | Improve this Doc View Source GetBestValue<TVal>(String, String) Get the best matching value in ALL the metadata items. Declaration public TVal GetBestValue<TVal>(string name, string type = null) Parameters Type Name Description System.String name attribute name we're looking for System.String type optional type-name, if provided, will only look at metadata of that type; otherwise (or if null) will look at all metadata items and pick first match Returns Type Description TVal A typed value. Type Parameters Name Description TVal expected type, like string, int etc. | Improve this Doc View Source GetBestValue<TVal>(String, String[]) Get the best matching value in the metadata items. Declaration public TVal GetBestValue<TVal>(string name, string[] types) Parameters Type Name Description System.String name attribute name we're looking for System.String [] types list of type-name in the order to check. if one of the values is null, it will then check all items no matter what type Returns Type Description TVal A typed value. Type Parameters Name Description TVal expected type, like string, int etc. Implements IMetadataOf System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IHasPermissions"
  },
  "api/ToSic.Eav.Logging.html": {
    "href": "api/ToSic.Eav.Logging.html",
    "title": "Namespace ToSic.Eav.Logging | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Logging The EAV system has a powerful internal logging system. It's the backbone to Insights. This is where it resides - usually you don't want to know about it ;). If you do, here a short conceptual background: Any object can have a property - usually called Log which is an ILog . Using this the object can call the Log.Add(...) to add messages. Many other commands help in various scenarios. The real power comes from chaining these - because each logger can know what parent-logger it reports to. This allows us to reproduce the chain of events in the original code, because you can track where loggers were made, and how they relate. Most objects which use the Log, implement the IHasLog , often by inheriting HasLog which automates things when initializing - like the chaining of the Loggers. Classes HasLog Base class for most objects which simply want to implement log and log-chaining. Interfaces IHasLog Objects which can log their activity, and share their log with other objects in the chain to produce extensive internal logging. ILog A logger with special capabilities. It can take log messages, and chain itself to other loggers. If chained, it can broadcast the messages to the other loggers from that time forward. Basically this is the backbone of Insights."
  },
  "api/ToSic.Eav.Data.Value-1.html": {
    "href": "api/ToSic.Eav.Data.Value-1.html",
    "title": "Class Value<T> | 2sxc and EAV 10",
    "keywords": "Class Value<T> Represents a typed Value object in the memory model Inheritance System.Object ToSic.Eav.Data.Value Value<T> Implements IValue <T> IValue Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class Value<T> : Value, IValue<T>, IValue Type Parameters Name Description T Type of the actual Value Constructors | Improve this Doc View Source Value(T) The default constructor to create a value object. Used internally to build the memory model. Declaration public Value(T typedContents) Parameters Type Name Description T typedContents Properties | Improve this Doc View Source SerializableObject Returns the inner value in a form that can be serialized, for JSON serialization etc. Declaration public object SerializableObject { get; } Property Value Type Description System.Object | Improve this Doc View Source TypedContents Declaration public T TypedContents { get; } Property Value Type Description T Implements IValue<T> IValue"
  },
  "api/ToSic.Sxc.Dnn.html": {
    "href": "api/ToSic.Sxc.Dnn.html",
    "title": "Namespace ToSic.Sxc.Dnn | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Dnn This contains interfaces that are specific to 2sxc in DNN. The purpose is that both the EAV and 2sxc are meant to be platform agnostic, but Razor and WebApi developers in DNN still need access to some helpers like the DNN object . Interfaces IDnnContext Provides information about the current context within DNN. This only applies to 2sxc running inside DNN, not inside another platform. IDynamicCode This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. IDynamicWebApi This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. IHtmlHelper helper to quickly \"raw\" some html IRazor All DNN Razor Pages inherit from this class"
  },
  "api/ToSic.Sxc.Blocks.IBlockDataSource.html": {
    "href": "api/ToSic.Sxc.Blocks.IBlockDataSource.html",
    "title": "Interface IBlockDataSource | 2sxc and EAV 10",
    "keywords": "Interface IBlockDataSource A special data-source for a block, which also knows about data-publishing (to ensure page-versioning if necessary). It's not documented more, as we may still make changes to it. Inherited Members IDataSource.DataSourceGuid IDataSource.Out IDataSource.Item[String] IDataSource.List IDataSource.ConfigurationProvider IDataSource.Configuration IDataSource.Ready IDataSource.Name IDataSource.Cache IDataSource.CacheRelevantConfigurations IInZone.ZoneId IInApp.AppId ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICacheKey.CachePartialKey ICacheKey.CacheFullKey IDataTarget.In IDataTarget.Attach(IDataSource) IDataTarget.Attach(String, IDataSource) IDataTarget.Attach(String, IDataStream) Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax public interface IBlockDataSource : IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget"
  },
  "api/ToSic.Eav.Data.html": {
    "href": "api/ToSic.Eav.Data.html",
    "title": "Namespace ToSic.Eav.Data | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Data The EAV system underlying 2sxc is the core data management system, in charge of Entities and such. For long term stability, we only use interfaces in the API. In most cases you only care about the IEntity interface. Classes Attribute<T> Represents an Attribute / Property of an Entity with Values of a Generic Type ContentType Represents a ContentType ContentTypeAttribute Defines an attribute with name and the type this attribute has. Part of of a IContentType definition. ContentTypeMetadata Provides metadata for a content type. This can be very special, because ContentTypes can be shared (ghosts), in which case the metadata must be retrieved from another \"remote\" location (where the original is defined). DimensionDefinition The definition of a dimension / language EntityBasedType Foundation for a class which gets its data from an Entity. This is used for more type safety - because some internal objects need entities for data-storage, but when programming they should use typed objects to not accidentally access invalid properties. EntityBasedWithLog A strongly typed object which gets its data from an entity, and also logs what it does. EntityRelationship Represents a Relation between two entities, connecting a parent to a child. Language Represents a Dimension / Language Assignment LazyEntities Delivers entities which are needed. It's lazy, because on initialization it only knows the Ids (int/guid) of the items to pick up, and only retrieves them when needed. Once retrieved, it will cache the result, until the up-stream reports changes. An additional optimization: in special cases where we just need the IDs for saving, it won't actually query the cache if the IDs are already known. Value<T> Represents a typed Value object in the memory model Zone Contains all the basic infos about a Zone - usually cached Interfaces IAttribute Represents an Attribute with Values - without knowing what data type is in the value. Usually we'll extend this and use IAttribute<T> instead. IAttribute<T> Represents an Attribute (Property), but strongly typed IAttributeBase Represents properties we should know about Attributes. This is the base for both IContentTypeAttribute (in the IContentType) attribute with values-list (in the IEntity) IContentType Represents a Content Type information (the schema) used for IEntity objects. IContentTypeAttribute Represents an Attribute definition in a ContentType. This is the base for attributes in IContentType IDimension Represents a Dimension to assign values to. Dimensions are usually languages ( ILanguage ), but in future they could also be multi-dimensional, like values which are mapped to a language and to a specific edition, use case, etc. IEntitiesSource This marks something which can give a list of entities. Usually used for lazy-loading data, where the source is attached, but the data isn't loaded yet. IEntity The primary data-item in the system, IEntity is a generic data-item for any kind of information. Note that it inherits IEntityLight which is the basic definition without languages, versioning, publishing etc. IEntityBasedType Foundation for interfaces which will enhance EntityBasedType which gets its data from an Entity. This is used for more type safety - so you base your interfaces - like IPerson on this, otherwise you're IPerson would be missing the Title, Id, Guid IEntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity . ILanguage Represents a Language Dimension. It's identical to an IDimension for now. IRelationshipManager Manages relationships of an entity - to it's children and parents. IValue Represents a Value in the EAV system. Values belong to an attribute and can belong to multiple languages. IValue<T> Represents a Value with a specific type (string, decimal, etc.). Enums ValueTypes Attribute Type Enum"
  },
  "api/ToSic.Eav.DataSources.ValueFilter.html": {
    "href": "api/ToSic.Eav.DataSources.ValueFilter.html",
    "title": "Class ValueFilter | 2sxc and EAV 10",
    "keywords": "Class ValueFilter Return only Entities having a specific value in an Attribute Inheritance System.Object HasLog BaseDataSource ValueFilter Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.ValueFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Filter, In = new string[]{\"Default\", \"Fallback\"}, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.ValueFilter\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-ValueFilter\")] public sealed class ValueFilter : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Attribute The attribute whose value will be scanned / filtered. Declaration public string Attribute { get; set; } Property Value Type Description System.String | Improve this Doc View Source Languages Language to filter for. At the moment it is not used, or it is trying to find \"any\" Declaration public string Languages { get; set; } Property Value Type Description System.String | Improve this Doc View Source Operator The comparison operator, == by default, many possibilities exist depending on the original types we're comparing Declaration public string Operator { get; set; } Property Value Type Description System.String | Improve this Doc View Source Take Amount of items to take - then stop filtering. For performance optimization. Declaration public string Take { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The filter that will be used - for example \"Daniel\" when looking for an entity w/the value Daniel Declaration public string Value { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.Data.IEntityLight.html": {
    "href": "api/ToSic.Eav.Data.IEntityLight.html",
    "title": "Interface IEntityLight | 2sxc and EAV 10",
    "keywords": "Interface IEntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity . Inherited Members IInApp.AppId Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IEntityLight : IInApp Properties | Improve this Doc View Source EntityGuid Gets the EntityGuid Declaration Guid EntityGuid { get; } Property Value Type Description System.Guid The GUID of the Entity | Improve this Doc View Source EntityId Gets the EntityId Declaration int EntityId { get; } Property Value Type Description System.Int32 The internal EntityId - usually for reference in the DB, but not quite always (like when this is a draft entity). | Improve this Doc View Source Item[String] Gets an Attribute by its StaticName Declaration object this[string attributeName] { get; } Parameters Type Name Description System.String attributeName StaticName of the Attribute Property Value Type Description System.Object The attribute - probably an IAttribute<T> | Improve this Doc View Source MetadataFor Information which is relevant if this current entity is actually mapped to something else. If it is mapped, then it's describing another thing, which is identified in this MetadataFor. Declaration ITarget MetadataFor { get; } Property Value Type Description ITarget A ITarget object describing the target. | Improve this Doc View Source Modified Gets the Last Modified DateTime Declaration DateTime Modified { get; } Property Value Type Description System.DateTime A date-time object. | Improve this Doc View Source Owner Owner of this entity Declaration string Owner { get; } Property Value Type Description System.String A string identifying the owner. Uses special encoding to work with various user-ID providers. | Improve this Doc View Source Relationships Relationship-helper object, important to navigate to children and parents Declaration IRelationshipManager Relationships { get; } Property Value Type Description IRelationshipManager The IRelationshipManager in charge of relationships for this Entity. | Improve this Doc View Source Title Gets the \"official\" Title-Attribute IAttribute<T> Declaration object Title { get; } Property Value Type Description System.Object The title of this Entity. The field used is determined in the IContentType . If you need a string, use GetBestTitle() instead. | Improve this Doc View Source Type Gets the ContentType of this Entity Declaration IContentType Type { get; } Property Value Type Description IContentType The content-type object. Methods | Improve this Doc View Source GetBestTitle() Best way to get the current entities title. The field used is determined in the IContentType . If you need the attribute-object, use the Title instead. Declaration string GetBestTitle() Returns Type Description System.String The entity title as a string. | Improve this Doc View Source GetBestValue(String, Boolean) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages Declaration object GetBestValue(string attributeName, bool resolveHyperlinks = false) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.Boolean resolveHyperlinks If true, will try to resolve links in the value. Default is false. Returns Type Description System.Object An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship | Improve this Doc View Source GetBestValue<TVal>(String, Boolean) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages. Will cast/convert to the expected type, or return null / default value for that type if not possible. Declaration TVal GetBestValue<TVal>(string name, bool resolveHyperlinks = false) Parameters Type Name Description System.String name Name of the attribute or virtual attribute System.Boolean resolveHyperlinks If true, will try to resolve links in the value. Default is false. Returns Type Description TVal An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship Type Parameters Name Description TVal"
  },
  "api/ToSic.Eav.Data.IAttributeBase.html": {
    "href": "api/ToSic.Eav.Data.IAttributeBase.html",
    "title": "Interface IAttributeBase | 2sxc and EAV 10",
    "keywords": "Interface IAttributeBase Represents properties we should know about Attributes. This is the base for both IContentTypeAttribute (in the IContentType) attribute with values-list (in the IEntity) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IAttributeBase Properties | Improve this Doc View Source ControlledType The official type, as a controlled value Declaration ValueTypes ControlledType { get; } Property Value Type Description ValueTypes | Improve this Doc View Source Name Name of the Attribute Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Type Type of the Attribute like 'string', 'decimal' etc. Declaration string Type { get; } Property Value Type Description System.String"
  },
  "api/ToSic.Eav.Data.ContentType.html": {
    "href": "api/ToSic.Eav.Data.ContentType.html",
    "title": "Class ContentType | 2sxc and EAV 10",
    "keywords": "Class ContentType Represents a ContentType Inheritance System.Object ContentType Implements IContentType IInApp Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class ContentType : IContentType, IInApp, IContentTypeShared, IHasExternalI18n Constructors | Improve this Doc View Source ContentType(Int32, String, String) Basic initializer of ContentType class Declaration public ContentType(int appId, string name, string staticName = null) Parameters Type Name Description System.Int32 appId System.String name System.String staticName Remarks Overload for in-memory entities | Improve this Doc View Source ContentType(Int32, String, String, Int32, String, String, Nullable<Int32>, Int32, Int32, Boolean, IHasMetadataSource) Initializes a new ContentType - usually when building the cache Declaration public ContentType(int appId, string name, string staticName, int attributeSetId, string scope, string description, int? usesConfigurationOfAttributeSet, int configZoneId, int configAppId, bool configurationIsOmnipresent, IHasMetadataSource metaProviderOfThisApp) Parameters Type Name Description System.Int32 appId System.String name System.String staticName System.Int32 attributeSetId System.String scope System.String description System.Nullable < System.Int32 > usesConfigurationOfAttributeSet System.Int32 configZoneId System.Int32 configAppId System.Boolean configurationIsOmnipresent IHasMetadataSource metaProviderOfThisApp Properties | Improve this Doc View Source AlwaysShareConfiguration Declaration public bool AlwaysShareConfiguration { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source Attributes Dictionary with all Attribute Definitions Declaration public IList<IContentTypeAttribute> Attributes { get; set; } Property Value Type Description System.Collections.Generic.IList < IContentTypeAttribute > | Improve this Doc View Source ContentTypeId Get the id of the Content Type - you usually don't need this! Declaration public int ContentTypeId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Description The content-type description Declaration public string Description { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source IsDynamic Determines if the data for this type is dynamic (stored as JSON) or EAV (split into sql-tables) Declaration public bool IsDynamic { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] A simple indexer to get an attribute Declaration public IContentTypeAttribute this[string fieldName] { get; } Parameters Type Name Description System.String fieldName Property Value Type Description IContentTypeAttribute The IContentTypeAttribute of the field name | Improve this Doc View Source Metadata Get the metadata for this content-type Declaration public ContentTypeMetadata Metadata { get; } Property Value Type Description ContentTypeMetadata Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Name Gets the Display Name of the Content Type Declaration public string Name { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source ParentAppId Declaration public int ParentAppId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ParentId Declaration public int? ParentId { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ParentZoneId Declaration public int ParentZoneId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source RepositoryAddress Information / ID / URL to this content-type where it was stored in the repository Declaration public string RepositoryAddress { get; } Property Value Type Description System.String | Improve this Doc View Source RepositoryType Information where the Content-Type was stored (file system, DB, etc.) Declaration public RepositoryTypes RepositoryType { get; } Property Value Type Description ToSic.Eav.Repositories.RepositoryTypes | Improve this Doc View Source Scope Get the scope of the Content Type (like sections in a DB) Declaration public string Scope { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source StaticName Static name - can be a GUID or a system-term for special types Declaration public string StaticName { get; protected set; } Property Value Type Description System.String Methods | Improve this Doc View Source Is(String) Check if this type is the same as a name given. Will check both the name and the static name Declaration public bool Is(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Implements IContentType IInApp"
  },
  "api/ToSic.Eav.Apps.html": {
    "href": "api/ToSic.Eav.Apps.html",
    "title": "Namespace ToSic.Eav.Apps | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Apps The EAV App System. It's responsible for taking data and bundling it into virtual segments called Apps , and providing nice APIs to work with the apps. Interfaces IApp An App in memory - for quickly getting things done with the app data, queries etc. IAppData An App-DataSource which also provides direct commands to edit/update/delete data. IAppDataConfiguration The configuration of an app-data - usually relevant so the source will auto-filter out unpublished data for normal viewers. IInApp This thing belongs to an App IInAppAndZone This thing belongs to an App and a Zone IInZone This things belongs to a Zone"
  },
  "articles/breaking-changes.html": {
    "href": "articles/breaking-changes.html",
    "title": "Breaking Changes in EAV and 2sxc | 2sxc and EAV 10",
    "keywords": "Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 10 Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.20.0? (2019-11-?) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>> . This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target . Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strongly typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent . External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps , was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView . We also renamed the internal properti ViewNameInUrl to UrlIdentifier . To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose . The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation , because you should use Header.Presentation Version 9 Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of DNN naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity . see full blog post"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Structured Content for .net Platforms | 2sxc and EAV 10",
    "keywords": "Structured Content for .net Platforms Where to Start 2sxc is an easy to use dynamic content system for .net Platforms like DNN. If you are just getting started, then this is probably not where you should be looking. Focus first on: Content on 2sxc.org like the learn section Apps on 2sxc Catalog which contains many ready-to-use apps like blogs and news, as well as tutorials The DNN Tutorials on 2sxc.org With that knowledge, you can already create amazing stuff. Everything you find here is very advanced and you won't need it for normal everyday work. Going Down the Rabbit Hole - C# APIs If you got past the basics and really want more, you should continue here: Read about the architecture Read about breaking changes Browse through the API"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "This is the 2sxc API Documentation. | 2sxc and EAV 10",
    "keywords": "This is the 2sxc API Documentation . It's completely work-in-progress (WIP) as of October / November 2019. Do not use this yet! Background: Architecture of Eav, Sxc, Dnn Before you start, please get familiar with the architecture - otherwise you probably won't understand what you see here. Note also that the real code of EAV/2sxc/DNN has way more stuff, but that's inofficial. Please don't use objects that are not documented here. That allows us to improve the architecture without worrying about breaking your code. Once we're really sure that certain parts are very final, we'll publish the API docs for those parts. What You're Probably Looking for APIs in Razor Templates and WebApi If you are creating a Razor template and want to know what APIs are available, start with IRazor which is mostly an IDynamicCode with an IHtmlHelper . This is because a Razor Page inherits from that interface, so you'll see all the commannds you get there. If you're creating a WebApi and need to know everything in it, you also want to check the IDynamicWebApi , because all WebApi classes implement that interface. Working with Entities and ADAM Assets If you're working with DynamicEntity objects and want to know more about them, check out @ToSic.Sxc.Interfaces.IDynamicEntity. In very rare cases you also want to know more about the underlying IEntity . If you're working with ADAM Assets, like from the AsAdam(...) command on @ToSic.Sxc.Interfaces.IDynamicEntity objects, you'll want to read about @ToSic.Eav.Apps.Assets.IAdamFolder and @ToSic.Eav.Apps.Assets.IAdamFile Programming with DataSources and VisualQuery All the DataSources are based on IDataSource and most of them are also IDataTarget . You can find most of them in ToSic.Eav.DataSources . todo datasources"
  },
  "articles/dynamic-entity.html": {
    "href": "articles/dynamic-entity.html",
    "title": "How to Use a Dynamic Entity | 2sxc and EAV 10",
    "keywords": "How to Use a Dynamic Entity Whenever you create a content-type - like Person - and want to work with the data in your C# Razor templates, you'll be working with a Dynamic Entity . The main code for this is the DynamicEntity.cs and also the Entity.cs . Code example using a Dynamic Entity We'll assume we have a Content Type called Book with the following properties: Title (text, 1-line) Teaser (text, multi-line) Description (text, html) ReleaseDate (date) Author (entity - another content item) Here's a code example in a C# Razor template: <!-- The default variable for the current item is Content, we'll just use another name for this sample note that .Title is automatically provided, because the content-type has the property title. --> <h1>@Content.Title</h1> <div>@Content.Description</div> <div>Author: @Content.Author[0].FullName</div> So basically all properties of this book can be shown using [Object].[PropertyName] - for example Content.ReleaseDate . What Dynamic Entity really does - and how... Technically the dynamic entity object is like a read-helper for the more complex IEntity . So actually the dynamic entity object will keep a reference to the underlying read-only IEntity item on a property Entity , and whenever your code accesses a property, the dynamic entity will query it from the underlying Entity . The main things that the dynamic entity does for you, are Give you a nice, short syntax to access a property - so Content.FirstName instead of Object.Attributes[\"FirstName\"][\"en\"] which would be necessary using the more advanced IEntity object Ensure that the language used in retrieving a value is the current user language Give conveniant access to related information like the Presentation object Automatically handle some data-not-found errors Automatically do conversions, like convert related entities (like .Children ) into dynamic objects to make your code more consistant Properties of a Dynamic Entity Read the API docs in the @ToSic.Sxc.Interfaces.IDynamicEntity. Additional properties that work (they are dynamic, so don't appear in the code) EntityType string - the type name like Person IsPublished bool - true/false if this item is currently published AnyProperty dynamic, but actually bool | string | decimal | datetime | List any normal property of the content-item can be accessd directly. It's correctly .net typed (string, etc.) The following Methods exist on all dynamic entities Render() - will render HTML for the current item, if there is a configuration for this. Almost always returns a simple HTML-comment, unless used as inner-content (added in 2sxc 8.3) Working with unpublished/draft items TODO: write something about how-to-check if published/unpublished, navigating it, etc. - or link to such a page Appendix The following properties/methods exist, but shouldn't be used. They are documented here so that you know that they are not meant for public use: Created - the created date Author - the person who created this item Owner - the current owner of the item, usually the author Metadadata - currently use AsEntity(theObject).Metadata Permissions - permissions of the current item (if any are defined) History Introduced in 2sxc 01.00 Changed to use interface IDynamicEntity in 6.x Draft/Published introduced in 2sxc 7.x Presentation introduced in 2sxc 7.x Modified introduced in 2sxc 8.x Implemented .net equality comparer in 2sxc 9.42 Parents added in 2sxc 9.42 Get added in 2sxc 9.42 and added to interface IDynamicEntity in 10.07 Parents introduced in 2sxc 9.42, and added to interface IDynamicEntity in 10.07 IsDemoItem property added in 2sxc 10.06"
  },
  "api/ToSic.Sxc.Data.html": {
    "href": "api/ToSic.Sxc.Data.html",
    "title": "Namespace ToSic.Sxc.Data | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Data The dynamic data system used in 2sxc. It's primary purpose is to ensure that you can easily use dynamic objects to write templates, tokens and more. Interfaces IDynamicEntity This is a wrapper for IEntity objects. It provides nicer access to underlying properties and automatically handles things like multi-language etc. The underlying IEntity IEntity is in the Entity property. Normally you will use it without caring about these internals. Please check How to Use a Dynamic Entity"
  },
  "api/ToSic.Eav.DataSources.DataTableDataSource.html": {
    "href": "api/ToSic.Eav.DataSources.DataTableDataSource.html",
    "title": "Class DataTableDataSource | 2sxc and EAV 10",
    "keywords": "Class DataTableDataSource Provide Entities from a System.Data.DataTable. This is not meant for VisualQuery, but for code which pre-processes data in a DataTable and then wants to provide it as entities. Inheritance System.Object HasLog BaseDataSource ExternalDataDataSource DataTableDataSource Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members ExternalDataDataSource.CacheTimestamp BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax public sealed class DataTableDataSource : ExternalDataDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Constructors | Improve this Doc View Source DataTableDataSource(DataTable, String, String, String, String) Initializes a new instance of the DataTableDataSource class with all important parameters. Declaration public DataTableDataSource(DataTable source, string contentType, string entityIdField = null, string titleField = null, string modifiedField = null) Parameters Type Name Description System.Data.DataTable source Source object containing the table System.String contentType Type-name to use System.String entityIdField ID column in the table System.String titleField Title column in the table System.String modifiedField modified column in the table Properties | Improve this Doc View Source ContentType Name of the ContentType Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source EntityIdField Name of the Column used as EntityId Declaration public string EntityIdField { get; set; } Property Value Type Description System.String | Improve this Doc View Source ModifiedField Name of the field which would contain a modified timestamp (date/time) Declaration public string ModifiedField { get; set; } Property Value Type Description System.String | Improve this Doc View Source Source Source DataTable Declaration public DataTable Source { get; set; } Property Value Type Description System.Data.DataTable | Improve this Doc View Source TitleField Name of the Title Attribute of the Source DataTable Declaration public string TitleField { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.Data.IValue.html": {
    "href": "api/ToSic.Eav.Data.IValue.html",
    "title": "Interface IValue | 2sxc and EAV 10",
    "keywords": "Interface IValue Represents a Value in the EAV system. Values belong to an attribute and can belong to multiple languages. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IValue Properties | Improve this Doc View Source Languages Gets the Language ( ILanguage ) assigned to this Value. Can be one or many. Declaration IList<ILanguage> Languages { get; set; } Property Value Type Description System.Collections.Generic.IList < ILanguage > | Improve this Doc View Source SerializableObject Returns the inner value in a form that can be serialized, for JSON serialization etc. Declaration object SerializableObject { get; } Property Value Type Description System.Object"
  },
  "api/ToSic.Eav.Data.Attribute-1.html": {
    "href": "api/ToSic.Eav.Data.Attribute-1.html",
    "title": "Class Attribute<T> | 2sxc and EAV 10",
    "keywords": "Class Attribute<T> Represents an Attribute / Property of an Entity with Values of a Generic Type Inheritance System.Object ToSic.Eav.Data.AttributeBase Attribute<T> Implements IAttribute <T> IAttribute IAttributeBase Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class Attribute<T> : AttributeBase, IAttribute<T>, IAttribute, IAttributeBase Type Parameters Name Description T Type of the Value Constructors | Improve this Doc View Source Attribute(String, String) Create an attribute object - usually when building up the data-model for caching. Declaration public Attribute(string name, string type) Parameters Type Name Description System.String name System.String type Properties | Improve this Doc View Source Item[Int32] Declaration public T this[int languageId] { get; } Parameters Type Name Description System.Int32 languageId Property Value Type Description T | Improve this Doc View Source Item[Int32[]] Declaration public T this[int[] languageIds] { get; } Parameters Type Name Description System.Int32 [] languageIds Property Value Type Description T | Improve this Doc View Source Item[String] Declaration public T this[string languageKey] { get; } Parameters Type Name Description System.String languageKey Property Value Type Description T | Improve this Doc View Source Item[String[]] Declaration public T this[string[] languageKeys] { get; } Parameters Type Name Description System.String [] languageKeys Property Value Type Description T | Improve this Doc View Source Typed Declaration public IList<IValue<T>> Typed { get; } Property Value Type Description System.Collections.Generic.IList < IValue <T>> | Improve this Doc View Source TypedContents Declaration public T TypedContents { get; } Property Value Type Description T | Improve this Doc View Source Values Gets a list of all IValue s of this Entity's Attribute. To get the typed objects, use the Typed Declaration public IList<IValue> Values { get; set; } Property Value Type Description System.Collections.Generic.IList < IValue > Implements IAttribute<T> IAttribute IAttributeBase"
  },
  "api/ToSic.Eav.Apps.Assets.html": {
    "href": "api/ToSic.Eav.Apps.Assets.html",
    "title": "Namespace ToSic.Eav.Apps.Assets | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Apps.Assets Everything related to assets in an EAV/2sxc App. It's the foundation for @ToSic.Eav.Apps.Adam. You will probably not use most of this. Interfaces IAsset Any asset (file/folder) of the EAV App System. This interface contains properties which both IFolder and IFile have in common IFile Describes a file asset as provided by the underlying environment (like DNN) IFolder Describes a folder as provided by the underlying environment (like DNN)"
  },
  "api/ToSic.Sxc.Blocks.ICmsBlock.html": {
    "href": "api/ToSic.Sxc.Blocks.ICmsBlock.html",
    "title": "Interface ICmsBlock | 2sxc and EAV 10",
    "keywords": "Interface ICmsBlock This is kind of the master-container for a content-management block. It's the wrapper which is in the CMS (DNN), and the module will talk with this Sxc Block to get everything rendered. Inherited Members IHasLog.Log IInZone.ZoneId IInApp.AppId Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax public interface ICmsBlock : IHasLog, IInAppAndZone, IInZone, IInApp Properties | Improve this Doc View Source App The app relevant to this instance - contains much more material like app-path or all the data existing in this app Declaration IApp App { get; } Property Value Type Description IApp | Improve this Doc View Source Block The real block / unit of content which will be rendered. Declaration IBlock Block { get; } Property Value Type Description IBlock | Improve this Doc View Source UserMayEdit Determines if the current user may edit content here. Declaration bool UserMayEdit { get; } Property Value Type Description System.Boolean | Improve this Doc View Source View The view in the current block - necessary to pick up the right rendering engine etc. Declaration IView View { get; } Property Value Type Description IView Remarks It usually pre-defined by the inner content-block, but in rare cases it can be overriden, for example when previewing a template switch. Methods | Improve this Doc View Source Render() Render this block. Internally will use the engine. Declaration HtmlString Render() Returns Type Description System.Web.HtmlString"
  },
  "api/ToSic.Eav.Logging.HasLog.html": {
    "href": "api/ToSic.Eav.Logging.HasLog.html",
    "title": "Class HasLog | 2sxc and EAV 10",
    "keywords": "Class HasLog Base class for most objects which simply want to implement log and log-chaining. Inheritance System.Object HasLog BaseDataSource EngineBase Implements IHasLog Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax public abstract class HasLog : IHasLog Constructors | Improve this Doc View Source HasLog(String, ILog, String, String) Constructor which ensures Log-chaining and optionally adds initial messages Declaration protected HasLog(string logName, ILog parentLog = null, string initialMessage = null, string className = null) Parameters Type Name Description System.String logName Name to use in the Log-ID ILog parentLog Parent log (if available) for log-chaining System.String initialMessage First message to be added System.String className Class name it's for Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration [IgnoreDataMember] public ILog Log { get; } Property Value Type Description ILog Methods | Improve this Doc View Source InitLog(String, ILog, String) This is the real initializer - implemented as a virtual method, because some long-living objects must actively prevent logs from being attached. Declaration public virtual void InitLog(string name, ILog parentLog = null, string initialMessage = null) Parameters Type Name Description System.String name ILog parentLog System.String initialMessage Remarks this one can be overridden by outside sources, like the cache which should never allow attaching logs at runtime Implements IHasLog"
  },
  "api/ToSic.Eav.DataSources.StreamMerge.html": {
    "href": "api/ToSic.Eav.DataSources.StreamMerge.html",
    "title": "Class StreamMerge | 2sxc and EAV 10",
    "keywords": "Class StreamMerge A DataSource that merges two streams Inheritance System.Object HasLog BaseDataSource StreamMerge Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.StreamMerge, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, DynamicOut = false, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-StreamMerge\")] public sealed class StreamMerge : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.DataSources.IDataSource.html": {
    "href": "api/ToSic.Eav.DataSources.IDataSource.html",
    "title": "Interface IDataSource | 2sxc and EAV 10",
    "keywords": "Interface IDataSource Public interface for an Eav DataSource. All DataSource objects are based on this. Inherited Members IInZone.ZoneId IInApp.AppId ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICacheKey.CachePartialKey ICacheKey.CacheFullKey Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax public interface IDataSource : IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache Properties | Improve this Doc View Source Cache Direct access to the root cache underlying all data provided by this data source. Declaration ICache Cache { get; } Property Value Type Description ToSic.Eav.DataSources.Caches.ICache An ToSic.Eav.DataSources.Caches.ICache data source to the root cache. | Improve this Doc View Source CacheRelevantConfigurations Some configuration of the data source is cache-relevant, others are not. This list contains the names of all configuration items which are cache relevant. It will be used when generating a unique ID for caching the data. Declaration List<string> CacheRelevantConfigurations { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source Configuration Gets a Dictionary of Configurations for this DataSource, e.g. Key: EntityId, Value: [QueryString:EntityId] Declaration IDictionary<string, string> Configuration { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source ConfigurationProvider Gets the ConfigurationProvider for this DataSource Declaration ITokenListFiller ConfigurationProvider { get; } Property Value Type Description ToSic.Eav.LookUp.ITokenListFiller | Improve this Doc View Source DataSourceGuid Internal ID usually from persisted configurations IF the configuration was build from an pre-stored query. Declaration Guid DataSourceGuid { get; set; } Property Value Type Description System.Guid The guid of this data source which identifies the configuration IEntity of the data source. | Improve this Doc View Source Item[String] Gets the Out-Stream with specified Name. Declaration IDataStream this[string outName] { get; } Parameters Type Name Description System.String outName Property Value Type Description IDataStream an IDataStream of the desired name Exceptions Type Condition System.NullReferenceException if the stream does not exist | Improve this Doc View Source List The items in the data-source - to be exact, the ones in the Default stream. Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > A list of IEntity items in the Default stream. | Improve this Doc View Source Name Name of this DataSource - not usually relevant. Declaration string Name { get; } Property Value Type Description System.String Name of this source. | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects | Improve this Doc View Source Ready Indicates whether the DataSource is ready for use (initialized/configured) Declaration bool Ready { get; } Property Value Type Description System.Boolean True if ready, false if not. Rarely used."
  },
  "api/ToSic.Eav.Data.Zone.html": {
    "href": "api/ToSic.Eav.Data.Zone.html",
    "title": "Class Zone | 2sxc and EAV 10",
    "keywords": "Class Zone Contains all the basic infos about a Zone - usually cached Inheritance System.Object Zone Implements IInZone Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public class Zone : IInZone Constructors | Improve this Doc View Source Zone(Int32, Int32, Dictionary<Int32, String>, List<DimensionDefinition>) Declaration public Zone(int zoneId, int defAppId, Dictionary<int, string> apps, List<DimensionDefinition> languages) Parameters Type Name Description System.Int32 zoneId System.Int32 defAppId System.Collections.Generic.Dictionary < System.Int32 , System.String > apps System.Collections.Generic.List < DimensionDefinition > languages Properties | Improve this Doc View Source Apps All Apps in this Zone with Id and Name Declaration public Dictionary<int, string> Apps { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Int32 , System.String > | Improve this Doc View Source DefaultAppId AppId of the default App in this Zone Declaration public int DefaultAppId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Languages Languages available in this Zone Declaration public List<DimensionDefinition> Languages { get; } Property Value Type Description System.Collections.Generic.List < DimensionDefinition > | Improve this Doc View Source ZoneId ZoneId Declaration public int ZoneId { get; } Property Value Type Description System.Int32 Implements IInZone"
  },
  "api/ToSic.Eav.Security.Permissions.IHasPermissions.html": {
    "href": "api/ToSic.Eav.Security.Permissions.IHasPermissions.html",
    "title": "Interface IHasPermissions | 2sxc and EAV 10",
    "keywords": "Interface IHasPermissions Anything that uses IHasPermissions can have custom permissions. This interface provides access to the information stored in the custom permissions. Namespace : ToSic.Eav.Security.Permissions Assembly : ToSic.Eav.Core.dll Syntax public interface IHasPermissions Properties | Improve this Doc View Source Permissions Permissions are also stored as entity items. Declaration IEnumerable<Permission> Permissions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Permission > List of permission entities for an item Remarks Currently still a private API, because the type could change to be a typed permission object"
  },
  "api/ToSic.Eav.Metadata.html": {
    "href": "api/ToSic.Eav.Metadata.html",
    "title": "Namespace ToSic.Eav.Metadata | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Metadata Everything related to the Metadata-system in EAV. This will be explained and documented more in future. Classes MetadataOf<T> Metadata of an item (a content-type or another entity). It's usually on a Metadata property of things that can have metadata. Target Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Interfaces IHasMetadataSource Marks metadata providers. This is important for things that need a source for their metadata, but won't load it till later. IMetadataOf A provider for metadata for something. So if an IEntity or an IApp has metadata, this will provide it. IMetadataSource For querying metadata from the data source. Mainly used in the Store, Cache-Systems and Apps. IRemoteMetadata This interface allows objects to provide metadata from \"remote\" systems meaning from apps / sources which the original source doesn't know about ITarget Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. ITargetTypes This interface allows objects to lookup metadata-target id / name of the system."
  },
  "api/ToSic.Sxc.Engines.Razor.html": {
    "href": "api/ToSic.Sxc.Engines.Razor.html",
    "title": "Namespace ToSic.Sxc.Engines.Razor | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Engines.Razor Classes RazorEngine The razor engine, which compiles / runs engine templates"
  },
  "api/ToSic.Sxc.Engines.Razor.RazorEngine.html": {
    "href": "api/ToSic.Sxc.Engines.Razor.RazorEngine.html",
    "title": "Class RazorEngine | 2sxc and EAV 10",
    "keywords": "Class RazorEngine The razor engine, which compiles / runs engine templates Inheritance System.Object HasLog EngineBase RazorEngine Implements IHasLog IEngine Inherited Members EngineBase.Init(IView, IApp, IContainer, IDataSource, Purpose, ICmsBlock, ILog) EngineBase.Render() HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Sxc.Engines.Razor Assembly : ToSic.SexyContent.Razor.dll Syntax [EngineDefinition(Name = \"Razor\")] public class RazorEngine : EngineBase, IHasLog, IEngine Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration public override void CustomizeData() Overrides EngineBase.CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IContainer, DateTime) Declaration public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos IContainer moduleInfo System.DateTime beginDate Overrides EngineBase.CustomizeSearch(Dictionary<String, List<ISearchItem>>, IContainer, DateTime) | Improve this Doc View Source RenderTemplate() Declaration protected override string RenderTemplate() Returns Type Description System.String Overrides ToSic.Sxc.Engines.EngineBase.RenderTemplate() Implements IHasLog IEngine"
  },
  "api/ToSic.Eav.DataSources.App.html": {
    "href": "api/ToSic.Eav.DataSources.App.html",
    "title": "Class App | 2sxc and EAV 10",
    "keywords": "Class App Represents an App with all the data inside it. For example, it has a variable amount of Out-streams, one for each content-type in the app. Inheritance System.Object HasLog BaseDataSource App Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.App, ToSic.Eav.DataSources\", Type = DataSourceType.Source, Icon = \"app\", DynamicOut = true, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.App\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-App\")] public class App : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source AppSwitch Use this to re-target the app-source to another app. Note that this can only be done before ever accessing the app - once the object has started reading data, switching has no more effect. Declaration public int AppSwitch { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Metadata Metadata is an important feature of apps. The App DataSource automatically provides direct access to the metadata system. This allows users of the App to query metadata directly through this object. Declaration public IMetadataSource Metadata { get; } Property Value Type Description IMetadataSource An initialized IMetadataSource for this app | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Overrides BaseDataSource.Out | Improve this Doc View Source ZoneSwitch Use this to re-target the app-source to another zone. Note that this can only be done before ever accessing the app - once the object has started reading data, switching has no more effect. Declaration public int ZoneSwitch { get; set; } Property Value Type Description System.Int32 Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.Data.IValue-1.html": {
    "href": "api/ToSic.Eav.Data.IValue-1.html",
    "title": "Interface IValue<T> | 2sxc and EAV 10",
    "keywords": "Interface IValue<T> Represents a Value with a specific type (string, decimal, etc.). Inherited Members IValue.Languages IValue.SerializableObject Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IValue<out T> : IValue Type Parameters Name Description T Type of the actual Value Properties | Improve this Doc View Source TypedContents Typed contents of the value Declaration T TypedContents { get; } Property Value Type Description T"
  },
  "api/ToSic.Eav.DataSources.PublishingFilter.html": {
    "href": "api/ToSic.Eav.DataSources.PublishingFilter.html",
    "title": "Class PublishingFilter | 2sxc and EAV 10",
    "keywords": "Class PublishingFilter Filter entities to show Drafts or only Published Entities Inheritance System.Object HasLog BaseDataSource PublishingFilter Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheTimestamp BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.PublishingFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Security, Icon = \"eye\", DynamicOut = false, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-PublishingFilter\")] public class PublishingFilter : BaseDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source ShowDrafts Indicates whether to show drafts or only Published Entities. Declaration public bool ShowDrafts { get; set; } Property Value Type Description System.Boolean Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.DataSources.CsvDataSource.html": {
    "href": "api/ToSic.Eav.DataSources.CsvDataSource.html",
    "title": "Class CsvDataSource | 2sxc and EAV 10",
    "keywords": "Class CsvDataSource DataSource for importing/reading CSV files. Inheritance System.Object HasLog BaseDataSource ExternalDataDataSource CsvDataSource Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members ExternalDataDataSource.CacheTimestamp BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.CsvDataSource, ToSic.Eav.DataSources\", Type = DataSourceType.Source, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.CsvDataSource\")] public class CsvDataSource : ExternalDataDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Properties | Improve this Doc View Source ContentType Name of the content type which the imported entities have. This is fake, but may be necessary for later filtering of the types. Defaults to \"Anonymous\" Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Delimiter Delimiter character in the CSV, usually a ',' or ';' but could also be a tab or something. Default is tab. Declaration public string Delimiter { get; set; } Property Value Type Description System.String | Improve this Doc View Source FilePath Path to the CSV file, relative to the website root Declaration public string FilePath { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdColumnName Column in the CSV which contains the ID. Declaration public string IdColumnName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ServerFilePath Full path to the CSV file. Declaration public string ServerFilePath { get; } Property Value Type Description System.String | Improve this Doc View Source TitleColumnName The CSV column containing the title of the item - for dropdowns etc. and the EntityTitle property. Declaration public string TitleColumnName { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Sxc.Apps.IApp.html": {
    "href": "api/ToSic.Sxc.Apps.IApp.html",
    "title": "Interface IApp | 2sxc and EAV 10",
    "keywords": "Interface IApp An app-object as is available in a razor template or WebApi Inherited Members IApp.Name IApp.Folder IApp.Hidden IApp.AppGuid IApp.Data IApp.Query IApp.Metadata IInZone.ZoneId IInApp.AppId Namespace : ToSic.Sxc.Apps Assembly : ToSic.Sxc.dll Syntax public interface IApp : IApp, IApp, IAppIdentityWithPublishingState, IInAppAndZone, IInZone, IInApp Properties | Improve this Doc View Source Configuration Configuration object as a DynamicEntity. This contains things like app version, path etc. Declaration AppConfiguration Configuration { get; } Property Value Type Description AppConfiguration An IDynamicEntity object | Improve this Doc View Source Path The path to the current app, for linking JS/CSS files and images in the app folder. Declaration string Path { get; } Property Value Type Description System.String Path usually starting with /portals/... | Improve this Doc View Source PhysicalPath The path on the server hard disk for the current app. Declaration string PhysicalPath { get; } Property Value Type Description System.String Path usually starting with c:... | Improve this Doc View Source Resources All the app resources (usually used for multi-language labels etc.) Declaration dynamic Resources { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Settings All the app settings which are custom for each app. Declaration dynamic Settings { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Thumbnail The thumbnail path for the current app. Declaration string Thumbnail { get; } Property Value Type Description System.String path + app-icon.png if there is an icon there."
  },
  "api/ToSic.Eav.Data.IAttribute.html": {
    "href": "api/ToSic.Eav.Data.IAttribute.html",
    "title": "Interface IAttribute | 2sxc and EAV 10",
    "keywords": "Interface IAttribute Represents an Attribute with Values - without knowing what data type is in the value. Usually we'll extend this and use IAttribute<T> instead. Inherited Members IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IAttribute : IAttributeBase Properties | Improve this Doc View Source Values Gets a list of all IValue s of this Entity's Attribute. To get the typed objects, use the Typed Declaration IList<IValue> Values { get; set; } Property Value Type Description System.Collections.Generic.IList < IValue >"
  },
  "api/ToSic.Sxc.Web.html": {
    "href": "api/ToSic.Sxc.Web.html",
    "title": "Namespace ToSic.Sxc.Web | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Web This contains stuff that are specific to 2sxc for all web platforms (Dnn, NopCommerce, Oqtane, etc.) Basically it's the CMS parts, without being specific to DNN implementations. Interfaces IDynamicCode Dynamic code files like Razor or WebApis. Supports many properties like App, etc. to ensure that the dynamic code has everything you need. Also provides many Conversions between IEntity and IDynamicEntity . Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity \"just work\" even if you give them the original data. IInPageEditingSystem Contains status and commands to configure the in-page editing system. ILinkHelper Helpers to create links with parameters or base-tag links (important for SPAs)"
  },
  "api/ToSic.Sxc.Dnn.IRazor.html": {
    "href": "api/ToSic.Sxc.Dnn.IRazor.html",
    "title": "Interface IRazor | 2sxc and EAV 10",
    "keywords": "Interface IRazor All DNN Razor Pages inherit from this class Inherited Members IDynamicCode.Dnn IDynamicCode.Content IDynamicCode.Header IDynamicCode.AsAdam(IDynamicEntity, String) IDynamicCode.AsAdam(IEntity, String) IDynamicCode.Link IDynamicCode.Edit IDynamicCode.AsDynamic(IEntity) IDynamicCode.AsDynamic(Object) IDynamicCode.AsDynamic(KeyValuePair<Int32, IEntity>) IDynamicCode.AsDynamic(IDataStream) IDynamicCode.AsDynamic(IEnumerable<IEntity>) IDynamicCode.AsEntity(Object) IDynamicCode.CreateSource<T>(IDataStream) IDynamicCode.CreateSource<T>(IDataSource, ITokenListFiller) Namespace : ToSic.Sxc.Dnn Assembly : ToSic.SexyContent.Razor.dll Syntax public interface IRazor : IDynamicCode, IDynamicCode, IAppAndDataHelpers, ISharedCodeBuilder Properties | Improve this Doc View Source Html Helper for Html.Raw - for creating raw html output which doesn't encode > and < Declaration IHtmlHelper Html { get; } Property Value Type Description IHtmlHelper | Improve this Doc View Source Purpose Declaration Purpose Purpose { get; } Property Value Type Description Purpose Methods | Improve this Doc View Source CustomizeData() Override this to have your code change the (already initialized) Data object. If you don't override this, nothing will be changed/customized. Declaration void CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IContainer, DateTime) Customize how the search will process data on this page. Declaration void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos IContainer moduleInfo System.DateTime beginDate"
  },
  "api/ToSic.Eav.DataSources.SqlDataSource.html": {
    "href": "api/ToSic.Eav.DataSources.SqlDataSource.html",
    "title": "Class SqlDataSource | 2sxc and EAV 10",
    "keywords": "Class SqlDataSource Provide Entities from a SQL Server Inheritance System.Object HasLog BaseDataSource ExternalDataDataSource SqlDataSource Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget Inherited Members ExternalDataDataSource.CacheTimestamp BaseDataSource.Name BaseDataSource.CacheRelevantConfigurations BaseDataSource.CachePartialKey BaseDataSource.Cache BaseDataSource.CacheFullKey BaseDataSource.CacheChanged(Int64) BaseDataSource.AppId BaseDataSource.ZoneId BaseDataSource.DataSourceGuid BaseDataSource.In BaseDataSource.Out BaseDataSource.Item[String] BaseDataSource.List BaseDataSource.ConfigurationProvider BaseDataSource.Configuration BaseDataSource.Attach(IDataSource) BaseDataSource.Attach(String, IDataSource) BaseDataSource.Attach(String, IDataStream) BaseDataSource.Ready BaseDataSource.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.SqlDataSource, ToSic.Eav.DataSources\", Type = DataSourceType.Source, DynamicOut = false, Icon = \"database\", ExpectsDataOfType = \"c76901b5-0345-4866-9fa3-6208de7f8543\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-SqlDataSource\")] public class SqlDataSource : ExternalDataDataSource, IHasLog, IDataSource, IInAppAndZone, IInZone, IInApp, ICacheExpiring, ITimestamped, ICacheKey, ICanPurgeListCache, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Constructors | Improve this Doc View Source SqlDataSource(String, String, String, String, String) Initializes a new instance of the SqlDataSource class Declaration public SqlDataSource(string connectionString, string selectCommand, string contentType, string entityIdField = null, string titleField = null) Parameters Type Name Description System.String connectionString Connection String to the DB System.String selectCommand SQL Query System.String contentType Name of virtual content-type we'll return System.String entityIdField ID-field in the DB to use System.String titleField Title-field in the DB to use Properties | Improve this Doc View Source ConnectionString ConnectionString to the DB Declaration public string ConnectionString { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConnectionStringName Name of the ConnectionString in the Application.Config to use Declaration public string ConnectionStringName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ContentType Name of the ContentType which we'll pretend the items have. Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source EntityIdField Name of the Column used as EntityId Declaration public string EntityIdField { get; set; } Property Value Type Description System.String | Improve this Doc View Source SelectCommand SQL Command for selecting data. Declaration public string SelectCommand { get; set; } Property Value Type Description System.String | Improve this Doc View Source TitleField Name of the Title Attribute of the Source DataTable Declaration public string TitleField { get; set; } Property Value Type Description System.String Implements IHasLog IDataSource IInAppAndZone IInZone IInApp ICacheExpiring ITimestamped ICacheKey IDataTarget"
  },
  "api/ToSic.Eav.Apps.Assets.IFolder.html": {
    "href": "api/ToSic.Eav.Apps.Assets.IFolder.html",
    "title": "Interface IFolder | 2sxc and EAV 10",
    "keywords": "Interface IFolder Describes a folder as provided by the underlying environment (like DNN) Inherited Members IAsset.Created IAsset.Id IAsset.Modified IAsset.Name IAsset.Path Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax public interface IFolder : IAsset Properties | Improve this Doc View Source HasChildren Information if this folder has things inside it - other folders, files etc. Declaration bool HasChildren { get; set; } Property Value Type Description System.Boolean true if it has items inside it, false if not"
  },
  "api/ToSic.Eav.Data.IEntityBasedType.html": {
    "href": "api/ToSic.Eav.Data.IEntityBasedType.html",
    "title": "Interface IEntityBasedType | 2sxc and EAV 10",
    "keywords": "Interface IEntityBasedType Foundation for interfaces which will enhance EntityBasedType which gets its data from an Entity. This is used for more type safety - so you base your interfaces - like IPerson on this, otherwise you're IPerson would be missing the Title, Id, Guid Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public interface IEntityBasedType Properties | Improve this Doc View Source Entity The underlying entity. Declaration IEntity Entity { get; } Property Value Type Description IEntity The entity, or null if not provided | Improve this Doc View Source Guid The entity guid, as quick, nice accessor. Declaration Guid Guid { get; } Property Value Type Description System.Guid The guid, or an empty-guid of no entity available | Improve this Doc View Source Id The entity id, as quick, nice accessor. Declaration int Id { get; } Property Value Type Description System.Int32 The id, or 0 if no entity available | Improve this Doc View Source Title The title as string. Declaration string Title { get; } Property Value Type Description System.String The title, or an empty string if not available or not string-able Remarks Can be overriden by other parts, if necessary."
  },
  "api/ToSic.Eav.Data.EntityBasedType.html": {
    "href": "api/ToSic.Eav.Data.EntityBasedType.html",
    "title": "Class EntityBasedType | 2sxc and EAV 10",
    "keywords": "Class EntityBasedType Foundation for a class which gets its data from an Entity. This is used for more type safety - because some internal objects need entities for data-storage, but when programming they should use typed objects to not accidentally access invalid properties. Inheritance System.Object EntityBasedType EntityBasedWithLog Permission Implements IEntityBasedType Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax public abstract class EntityBasedType : IEntityBasedType Constructors | Improve this Doc View Source EntityBasedType(IEntity) Declaration protected EntityBasedType(IEntity entity) Parameters Type Name Description IEntity entity Properties | Improve this Doc View Source Entity The underlying entity. Declaration public IEntity Entity { get; } Property Value Type Description IEntity The entity, or null if not provided | Improve this Doc View Source Guid The entity guid, as quick, nice accessor. Declaration public Guid Guid { get; } Property Value Type Description System.Guid The guid, or an empty-guid of no entity available | Improve this Doc View Source Id The entity id, as quick, nice accessor. Declaration public int Id { get; } Property Value Type Description System.Int32 The id, or 0 if no entity available | Improve this Doc View Source Title The title as string. Declaration public virtual string Title { get; } Property Value Type Description System.String The title, or an empty string if not available or not string-able Remarks Can be overriden by other parts, if necessary. Methods | Improve this Doc View Source Get<T>(String, T) Get a value from the underlying entity. Declaration protected T Get<T>(string fieldName, T fallback) Parameters Type Name Description System.String fieldName field name T fallback fallback value Returns Type Description T The value. If the Entity is missing, will return the fallback result. Type Parameters Name Description T type, should only be string, decimal, bool Implements IEntityBasedType"
  }
}