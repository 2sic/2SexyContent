using System.Text;
using ToSic.Eav;
using ToSic.Lib.Services;

namespace ToSic.Sxc.Code.Internal.Generate;

internal class DataClassGenerator(DataModelGenerator dmg, IContentType type, string typeName, string edition): HelperBase(dmg.Log, "Gen.DtaCls")
{
    #region Class

    internal GenCodeClass PrepareFile()
    {
        var l = Log.Fn<GenCodeClass>($"{nameof(type)}: {type?.Name} ({type?.NameId})");

        if (type == null)
            return l.ReturnNull("No content type provided");

        // Generate main partial class
        var autoGenClassName = type.Name + DataModelGenerator.AutoGeneratedSuffix;
        var mainClass = dmg.ClassWrapper(type.Name, false, true, autoGenClassName);

        // Generate AutoGen class with properties
        var classAutoGen = dmg.ClassWrapper(autoGenClassName, true, false, DataModelGenerator.InheritsDataItem16);
        var (_, propsSb, usings, firstProperty) = ClassProperties(type.Attributes.ToList());
        var classCode = classAutoGen.ToString(propsSb);


        var fullBody =
            MainClassComment(firstProperty)
            + mainClass
            + AutoGenClassComment()
            + classCode;

        var fileContents =
            dmg.GenHelper.GenerateUsings(usings)
            + dmg.NamespaceWrapper(DataModelGenerator.DataNamespace)
                .ToString(fullBody);

        return new(type.Name, fileContents, FileIntroComment(dmg.User.Name));
    }

    #endregion

    #region Properties

    private (bool HasProps, string Code, List<string> Usings, string FirstProperty) ClassProperties(List<IContentTypeAttribute> attributes)
    {
        var l = Log.Fn<(bool, string, List<string>, string)>($"{nameof(attributes)}: {attributes.Count}");

        // Generate all properties with the helpers
        var propsSnippets = attributes
            .Select(a => new
            {
                Attribute = a,
                Generators = GenDataProperties.Generators.Where(p => p.ForDataType == a.Type).ToList()
            })
            .Where(a => a.Generators.Any())
            .SelectMany(set =>
            {
                return set.Generators
                    .SelectMany(p => p.Generate(set.Attribute, DataModelGenerator.DepthProperty));
            })
            .ToList();

        if (!propsSnippets.Any())
            return l.Return((false, null, null, null));

        // Detect duplicate names as this would fail
        // If we have duplicates, keep the first with a real priority
        var deduplicated = propsSnippets
            .GroupBy(ps => ps.NameId)
            .SelectMany(g => g.OrderBy(ps => ps.Priority ? 0 : 1).Take(1))
            .OrderBy(ps => ps.NameId)
            .ToList();

        var sb = new StringBuilder();
        foreach (var genCode in deduplicated)
            sb.AppendLine(genCode.ToString());

        var usings = deduplicated.SelectMany(ps => ps.Usings)
            .Distinct()
            .OrderBy(u => u)
            .ToList();

        return l.Return((true, sb.ToString(), usings, deduplicated.First().NameId));
    }


    #endregion

    #region Comments

    public string FileIntroComment(string userName) =>
        $$"""
          // DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
          // See also: https://go.2sxc.org/hotbuild-autogen
          // To extend it, create a "{{typeName}}.cs" with this contents:
          /*
          namespace ThisApp.Data
          {
            public partial class {{typeName}}
            {
              // Add your own properties and methods here
            }
          }
          */

          // Generator: {{dmg.GetType().Name}} v{{SharedAssemblyInfo.AssemblyVersion}}
          // User:      {{userName}}
          // Edition:   /{{edition}}
          // When:      {{DateTime.Now:u}}

          """;

    public string MainClassComment(string firstPropertyName) =>
        dmg.GenHelper.CodeComment(DataModelGenerator.DepthClass,
            $"""
             This is a generated class for {typeName}
             To extend/modify it, see instructions above.
             """)
        + dmg.GenHelper.XmlComment(DataModelGenerator.DepthClass, summary:
            $"""
             {typeName} data object

             Default properties such as `.Title` or `.Id` are provided in the base class.
             Most properties have a simple access, such as `.{firstPropertyName}`.
             For other properties or uses, the common method such as
             `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.

             Generated {DateTime.Now:u} - if you change the content type, remember to re-generate.
             """);

    public string AutoGenClassComment() => 
        dmg.GenHelper.XmlComment(DataModelGenerator.DepthClass, summary: $"Auto-Generated base class for {typeName}.");

    #endregion

}