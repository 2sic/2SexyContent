@using ToSic.Sxc.OqtaneModule.Services
@using ToSic.Sxc.OqtaneModule.Models
@using System.Text.Json;
@using System.Text.Json.Serialization;

@namespace ToSic.Sxc.OqtaneModule
@inherits ModuleBase
@inject ISxcService SxcService
@inject NavigationManager NavigationManager


<h3>Alias</h3>
<pre>@JsonSerializer.Serialize(PageState.Alias, jsonSerializerOptions)</pre>

<h3>Site</h3>
<pre>@JsonSerializer.Serialize(PageState.Site, jsonSerializerOptions)</pre>

<h3>User</h3>
<pre>@JsonSerializer.Serialize(PageState.User, jsonSerializerOptions)</pre>

<h3>ModuleState</h3>
<pre>@JsonSerializer.Serialize(ModuleState, jsonSerializerOptions)</pre>

<h3>PageState</h3>
<pre>@JsonSerializer.Serialize(PageState, jsonSerializerOptions)</pre>


@code {
    public override List<Resource> Resources => new List<Resource>()
    {
    new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
    new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    JsonSerializerOptions jsonSerializerOptions = new JsonSerializerOptions()
    {
        WriteIndented = true,
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //_Sxcs = await SxcService.GetSxcsAsync(ModuleState.ModuleId);


        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Sxc {Error}", ex.Message);
            AddModuleMessage("Error Loading Sxc", MessageType.Error);
        }
    }
}