@using ToSic.Sxc.Services
@using ToSic.Sxc.Models

@namespace ToSic.Sxc
@inherits ModuleBase
@inject ISxcService SxcService
@inject NavigationManager NavigationManager

@if (_Sxcs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Sxc" />
    <br />
    <br />
    @if (@_Sxcs.Count != 0)
    {
        <Pager Items="@_Sxcs">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>Name</th>
            </Header>
            <Row>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.SxcId.ToString())" /></td>
                <td><ActionDialog Header="Delete Sxc" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Sxc?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
                <td>@context.Name</td>
            </Row>
        </Pager>
    }
    else
    {
        <p>No Sxcs To Display</p>
    }
}

<!-- The content below is for informational purposes only and can be safely removed -->

<hr />
Sxc Module Created Successfully. Use Edit Mode To Add A Sxc. You Can Access The Files At The Following Locations:<br /><br />
C:\Projects\_Test\Oqtane\POC7\ToSic.Sxc\Client\<br />
- ToSic.Sxc.Client.csproj - client project<br />
- _Imports.razor - global imports for module components<br />
- Edit.razor - component for adding or editing content<br />
- Index.razor - main component for your module **the content you are reading is in this file**<br />
- ModuleInfo.cs - implements IModule interface to provide configuration settings for your module<br />
- Settings.razor - component for managing module settings<br />
- Services\ISxcService.cs - interface for defining service API methods<br />
- Services\SxcService.cs - implements service API interface methods<br /><br />
C:\Projects\_Test\Oqtane\POC7\ToSic.Sxc\Package\<br />
- ToSic.Sxc.nuspec - nuget manifest for packaging module<br />
- ToSic.Sxc.Package.csproj - packaging project<br />
- debug.cmd - copies assemblies to Oqtane bin folder when in Debug mode<br />
- release.cmd - creates nuget package and deploys to Oqtane wwwroot/modules folder when in Release mode<br /><br />
C:\Projects\_Test\Oqtane\POC7\ToSic.Sxc\Server\<br />
- ToSic.Sxc.Server.csproj - server project<br />
- Controllers\SxcController.cs - API methods implemented using a REST pattern<br />
- Manager\SxcManager.cs - implements optional module interfaces for features such as import/export of content<br />
- Repository\ISxcRepository.cs - interface for defining repository methods<br />
- Repository\SxcRespository.cs - implements repository interface methods for data access using EF Core<br />
- Repository\SxcContext.cs - provides a DB Context for data access<br />
- Scripts\ToSic.Sxc.1.0.0.sql - database schema definition script<br />
- Scripts\ToSic.Sxc.Uninstall.sql - database uninstall script<br />
- wwwroot\Module.css - module style sheet<br /><br />
C:\Projects\_Test\Oqtane\POC7\ToSic.Sxc\Shared\<br />
- ToSic.Sxc.csproj - shared project<br />
- Models\Sxc.cs - model definition<br /><br />

<!-- The content above is for informational purposes only and can be safely removed -->

@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<Sxc> _Sxcs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _Sxcs = await SxcService.GetSxcsAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Sxc {Error}", ex.Message);
            AddModuleMessage("Error Loading Sxc", MessageType.Error);
        }
    }

    private async Task Delete(Sxc Sxc)
    {
        try
        {
            await SxcService.DeleteSxcAsync(Sxc.SxcId, ModuleState.ModuleId);
            await logger.LogInformation("Sxc Deleted {Sxc}", Sxc);
            _Sxcs = await SxcService.GetSxcsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Sxc {Sxc} {Error}", Sxc, ex.Message);
            AddModuleMessage("Error Deleting Sxc", MessageType.Error);
        }
    }
}